
TDT4200Group1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000b84  00000c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800144  00800144  00000c5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021a0  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000da2  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bdd  00000000  00000000  00003e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000538  00000000  00000000  00004a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c7  00000000  00000000  00004f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fb2  00000000  00000000  0000561b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  000065cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 5f       	subi	r16, 0xF0	; 240
  78:	00 00       	nop
  7a:	00 07       	cpc	r16, r16
  7c:	00 07       	cpc	r16, r16
  7e:	00 14       	cp	r0, r0
  80:	7f 14       	cp	r7, r15
  82:	7f 14       	cp	r7, r15
  84:	24 2a       	or	r2, r20
  86:	7f 2a       	or	r7, r31
  88:	12 23       	and	r17, r18
  8a:	13 08       	sbc	r1, r3
  8c:	64 62       	ori	r22, 0x24	; 36
  8e:	36 49       	sbci	r19, 0x96	; 150
  90:	55 22       	and	r5, r21
  92:	50 00       	.word	0x0050	; ????
  94:	05 03       	mulsu	r16, r21
  96:	00 00       	nop
  98:	00 1c       	adc	r0, r0
  9a:	22 41       	sbci	r18, 0x12	; 18
  9c:	00 00       	nop
  9e:	41 22       	and	r4, r17
  a0:	1c 00       	.word	0x001c	; ????
  a2:	08 2a       	or	r0, r24
  a4:	1c 2a       	or	r1, r28
  a6:	08 08       	sbc	r0, r8
  a8:	08 3e       	cpi	r16, 0xE8	; 232
  aa:	08 08       	sbc	r0, r8
  ac:	00 50       	subi	r16, 0x00	; 0
  ae:	30 00       	.word	0x0030	; ????
  b0:	00 08       	sbc	r0, r0
  b2:	08 08       	sbc	r0, r8
  b4:	08 08       	sbc	r0, r8
  b6:	00 60       	ori	r16, 0x00	; 0
  b8:	60 00       	.word	0x0060	; ????
  ba:	00 20       	and	r0, r0
  bc:	10 08       	sbc	r1, r0
  be:	04 02       	muls	r16, r20
  c0:	3e 51       	subi	r19, 0x1E	; 30
  c2:	49 45       	sbci	r20, 0x59	; 89
  c4:	3e 00       	.word	0x003e	; ????
  c6:	42 7f       	andi	r20, 0xF2	; 242
  c8:	40 00       	.word	0x0040	; ????
  ca:	42 61       	ori	r20, 0x12	; 18
  cc:	51 49       	sbci	r21, 0x91	; 145
  ce:	46 21       	and	r20, r6
  d0:	41 45       	sbci	r20, 0x51	; 81
  d2:	4b 31       	cpi	r20, 0x1B	; 27
  d4:	18 14       	cp	r1, r8
  d6:	12 7f       	andi	r17, 0xF2	; 242
  d8:	10 27       	eor	r17, r16
  da:	45 45       	sbci	r20, 0x55	; 85
  dc:	45 39       	cpi	r20, 0x95	; 149
  de:	3c 4a       	sbci	r19, 0xAC	; 172
  e0:	49 49       	sbci	r20, 0x99	; 153
  e2:	30 01       	movw	r6, r0
  e4:	71 09       	sbc	r23, r1
  e6:	05 03       	mulsu	r16, r21
  e8:	36 49       	sbci	r19, 0x96	; 150
  ea:	49 49       	sbci	r20, 0x99	; 153
  ec:	36 06       	cpc	r3, r22
  ee:	49 49       	sbci	r20, 0x99	; 153
  f0:	29 1e       	adc	r2, r25
  f2:	00 36       	cpi	r16, 0x60	; 96
  f4:	36 00       	.word	0x0036	; ????
  f6:	00 00       	nop
  f8:	56 36       	cpi	r21, 0x66	; 102
  fa:	00 00       	nop
  fc:	00 08       	sbc	r0, r0
  fe:	14 22       	and	r1, r20
 100:	41 14       	cp	r4, r1
 102:	14 14       	cp	r1, r4
 104:	14 14       	cp	r1, r4
 106:	41 22       	and	r4, r17
 108:	14 08       	sbc	r1, r4
 10a:	00 02       	muls	r16, r16
 10c:	01 51       	subi	r16, 0x11	; 17
 10e:	09 06       	cpc	r0, r25
 110:	32 49       	sbci	r19, 0x92	; 146
 112:	79 41       	sbci	r23, 0x19	; 25
 114:	3e 7e       	andi	r19, 0xEE	; 238
 116:	11 11       	cpse	r17, r1
 118:	11 7e       	andi	r17, 0xE1	; 225
 11a:	7f 49       	sbci	r23, 0x9F	; 159
 11c:	49 49       	sbci	r20, 0x99	; 153
 11e:	36 3e       	cpi	r19, 0xE6	; 230
 120:	41 41       	sbci	r20, 0x11	; 17
 122:	41 22       	and	r4, r17
 124:	7f 41       	sbci	r23, 0x1F	; 31
 126:	41 22       	and	r4, r17
 128:	1c 7f       	andi	r17, 0xFC	; 252
 12a:	49 49       	sbci	r20, 0x99	; 153
 12c:	49 41       	sbci	r20, 0x19	; 25
 12e:	7f 09       	sbc	r23, r15
 130:	09 01       	movw	r0, r18
 132:	01 3e       	cpi	r16, 0xE1	; 225
 134:	41 41       	sbci	r20, 0x11	; 17
 136:	51 32       	cpi	r21, 0x21	; 33
 138:	7f 08       	sbc	r7, r15
 13a:	08 08       	sbc	r0, r8
 13c:	7f 00       	.word	0x007f	; ????
 13e:	41 7f       	andi	r20, 0xF1	; 241
 140:	41 00       	.word	0x0041	; ????
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	41 3f       	cpi	r20, 0xF1	; 241
 146:	01 7f       	andi	r16, 0xF1	; 241
 148:	08 14       	cp	r0, r8
 14a:	22 41       	sbci	r18, 0x12	; 18
 14c:	7f 40       	sbci	r23, 0x0F	; 15
 14e:	40 40       	sbci	r20, 0x00	; 0
 150:	40 7f       	andi	r20, 0xF0	; 240
 152:	02 04       	cpc	r0, r2
 154:	02 7f       	andi	r16, 0xF2	; 242
 156:	7f 04       	cpc	r7, r15
 158:	08 10       	cpse	r0, r8
 15a:	7f 3e       	cpi	r23, 0xEF	; 239
 15c:	41 41       	sbci	r20, 0x11	; 17
 15e:	41 3e       	cpi	r20, 0xE1	; 225
 160:	7f 09       	sbc	r23, r15
 162:	09 09       	sbc	r16, r9
 164:	06 3e       	cpi	r16, 0xE6	; 230
 166:	41 51       	subi	r20, 0x11	; 17
 168:	21 5e       	subi	r18, 0xE1	; 225
 16a:	7f 09       	sbc	r23, r15
 16c:	19 29       	or	r17, r9
 16e:	46 46       	sbci	r20, 0x66	; 102
 170:	49 49       	sbci	r20, 0x99	; 153
 172:	49 31       	cpi	r20, 0x19	; 25
 174:	01 01       	movw	r0, r2
 176:	7f 01       	movw	r14, r30
 178:	01 3f       	cpi	r16, 0xF1	; 241
 17a:	40 40       	sbci	r20, 0x00	; 0
 17c:	40 3f       	cpi	r20, 0xF0	; 240
 17e:	1f 20       	and	r1, r15
 180:	40 20       	and	r4, r0
 182:	1f 7f       	andi	r17, 0xFF	; 255
 184:	20 18       	sub	r2, r0
 186:	20 7f       	andi	r18, 0xF0	; 240
 188:	63 14       	cp	r6, r3
 18a:	08 14       	cp	r0, r8
 18c:	63 03       	mulsu	r22, r19
 18e:	04 78       	andi	r16, 0x84	; 132
 190:	04 03       	mulsu	r16, r20
 192:	61 51       	subi	r22, 0x11	; 17
 194:	49 45       	sbci	r20, 0x59	; 89
 196:	43 00       	.word	0x0043	; ????
 198:	00 7f       	andi	r16, 0xF0	; 240
 19a:	41 41       	sbci	r20, 0x11	; 17
 19c:	02 04       	cpc	r0, r2
 19e:	08 10       	cpse	r0, r8
 1a0:	20 41       	sbci	r18, 0x10	; 16
 1a2:	41 7f       	andi	r20, 0xF1	; 241
 1a4:	00 00       	nop
 1a6:	04 02       	muls	r16, r20
 1a8:	01 02       	muls	r16, r17
 1aa:	04 40       	sbci	r16, 0x04	; 4
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	40 40       	sbci	r20, 0x00	; 0
 1b0:	00 01       	movw	r0, r0
 1b2:	02 04       	cpc	r0, r2
 1b4:	00 20       	and	r0, r0
 1b6:	54 54       	subi	r21, 0x44	; 68
 1b8:	54 78       	andi	r21, 0x84	; 132
 1ba:	7f 48       	sbci	r23, 0x8F	; 143
 1bc:	44 44       	sbci	r20, 0x44	; 68
 1be:	38 38       	cpi	r19, 0x88	; 136
 1c0:	44 44       	sbci	r20, 0x44	; 68
 1c2:	44 20       	and	r4, r4
 1c4:	38 44       	sbci	r19, 0x48	; 72
 1c6:	44 48       	sbci	r20, 0x84	; 132
 1c8:	7f 38       	cpi	r23, 0x8F	; 143
 1ca:	54 54       	subi	r21, 0x44	; 68
 1cc:	54 18       	sub	r5, r4
 1ce:	08 7e       	andi	r16, 0xE8	; 232
 1d0:	09 01       	movw	r0, r18
 1d2:	02 08       	sbc	r0, r2
 1d4:	14 54       	subi	r17, 0x44	; 68
 1d6:	54 3c       	cpi	r21, 0xC4	; 196
 1d8:	7f 08       	sbc	r7, r15
 1da:	04 04       	cpc	r0, r4
 1dc:	78 00       	.word	0x0078	; ????
 1de:	44 7d       	andi	r20, 0xD4	; 212
 1e0:	40 00       	.word	0x0040	; ????
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	44 3d       	cpi	r20, 0xD4	; 212
 1e6:	00 00       	nop
 1e8:	7f 10       	cpse	r7, r15
 1ea:	28 44       	sbci	r18, 0x48	; 72
 1ec:	00 41       	sbci	r16, 0x10	; 16
 1ee:	7f 40       	sbci	r23, 0x0F	; 15
 1f0:	00 7c       	andi	r16, 0xC0	; 192
 1f2:	04 18       	sub	r0, r4
 1f4:	04 78       	andi	r16, 0x84	; 132
 1f6:	7c 08       	sbc	r7, r12
 1f8:	04 04       	cpc	r0, r4
 1fa:	78 38       	cpi	r23, 0x88	; 136
 1fc:	44 44       	sbci	r20, 0x44	; 68
 1fe:	44 38       	cpi	r20, 0x84	; 132
 200:	7c 14       	cp	r7, r12
 202:	14 14       	cp	r1, r4
 204:	08 08       	sbc	r0, r8
 206:	14 14       	cp	r1, r4
 208:	18 7c       	andi	r17, 0xC8	; 200
 20a:	7c 08       	sbc	r7, r12
 20c:	04 04       	cpc	r0, r4
 20e:	08 48       	sbci	r16, 0x88	; 136
 210:	54 54       	subi	r21, 0x44	; 68
 212:	54 20       	and	r5, r4
 214:	04 3f       	cpi	r16, 0xF4	; 244
 216:	44 40       	sbci	r20, 0x04	; 4
 218:	20 3c       	cpi	r18, 0xC0	; 192
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	20 7c       	andi	r18, 0xC0	; 192
 21e:	1c 20       	and	r1, r12
 220:	40 20       	and	r4, r0
 222:	1c 3c       	cpi	r17, 0xCC	; 204
 224:	40 30       	cpi	r20, 0x00	; 0
 226:	40 3c       	cpi	r20, 0xC0	; 192
 228:	44 28       	or	r4, r4
 22a:	10 28       	or	r1, r0
 22c:	44 0c       	add	r4, r4
 22e:	50 50       	subi	r21, 0x00	; 0
 230:	50 3c       	cpi	r21, 0xC0	; 192
 232:	44 64       	ori	r20, 0x44	; 68
 234:	54 4c       	sbci	r21, 0xC4	; 196
 236:	44 00       	.word	0x0044	; ????
 238:	08 36       	cpi	r16, 0x68	; 104
 23a:	41 00       	.word	0x0041	; ????
 23c:	00 00       	nop
 23e:	7f 00       	.word	0x007f	; ????
 240:	00 00       	nop
 242:	41 36       	cpi	r20, 0x61	; 97
 244:	08 00       	.word	0x0008	; ????
 246:	02 01       	movw	r0, r4
 248:	03 02       	muls	r16, r19
 24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf ef       	ldi	r28, 0xFF	; 255
 252:	d4 e0       	ldi	r29, 0x04	; 4
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	11 e0       	ldi	r17, 0x01	; 1
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	e4 e8       	ldi	r30, 0x84	; 132
 260:	fb e0       	ldi	r31, 0x0B	; 11
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a4 34       	cpi	r26, 0x44	; 68
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	a4 e4       	ldi	r26, 0x44	; 68
 272:	b1 e0       	ldi	r27, 0x01	; 1
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	ab 35       	cpi	r26, 0x5B	; 91
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
 282:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <_exit>

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <calibrateJoystick>:
#include "adc.h"

int null_X, null_Y;

void calibrateJoystick(){
	null_X = null_Y =0;
 28a:	10 92 50 01 	sts	0x0150, r1
 28e:	10 92 4f 01 	sts	0x014F, r1
 292:	10 92 4a 01 	sts	0x014A, r1
 296:	10 92 49 01 	sts	0x0149, r1
	null_Y = ADC_read(ADC_Y_AXIS);
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	82 e5       	ldi	r24, 0x52	; 82
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <calibrateJoystick+0x18>
	_delay_us(50);
	return *ptr;
 2a6:	e0 e0       	ldi	r30, 0x00	; 0
 2a8:	f4 e1       	ldi	r31, 0x14	; 20
 2aa:	80 81       	ld	r24, Z

int null_X, null_Y;

void calibrateJoystick(){
	null_X = null_Y =0;
	null_X = ADC_read(ADC_X_AXIS);
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	90 93 4a 01 	sts	0x014A, r25
 2b2:	80 93 49 01 	sts	0x0149, r24
	null_Y = ADC_read(ADC_Y_AXIS);
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	80 83       	st	Z, r24
 2ba:	82 e5       	ldi	r24, 0x52	; 82
 2bc:	8a 95       	dec	r24
 2be:	f1 f7       	brne	.-4      	; 0x2bc <calibrateJoystick+0x32>
	_delay_us(50);
	return *ptr;
 2c0:	80 91 00 14 	lds	r24, 0x1400
int null_X, null_Y;

void calibrateJoystick(){
	null_X = null_Y =0;
	null_X = ADC_read(ADC_X_AXIS);
	null_Y = ADC_read(ADC_Y_AXIS);
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 50 01 	sts	0x0150, r25
 2ca:	80 93 4f 01 	sts	0x014F, r24
 2ce:	08 95       	ret

000002d0 <buttons_init>:
 
#include "buttons.h"


void buttons_init() {
	PORTB = 0x01<<2;
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	88 bb       	out	0x18, r24	; 24
	DDRB = 0x00;
 2d4:	17 ba       	out	0x17, r1	; 23
 2d6:	08 95       	ret

000002d8 <can_setMode>:
	printf_char("\n");

}

void can_setMode(char mode) {
	 mcp_bitModify(CAN_REGISTER_ADDRESS_MODESELECT, CAN_MASK_MODE, mode);
 2d8:	48 2f       	mov	r20, r24
 2da:	60 ee       	ldi	r22, 0xE0	; 224
 2dc:	80 ef       	ldi	r24, 0xF0	; 240
 2de:	0e 94 a4 02 	call	0x548	; 0x548 <mcp_bitModify>
 2e2:	08 95       	ret

000002e4 <can_init>:

#include "can.h"
#include "../MCP/mcp.h"
#include "../SPI/spi.h"

void can_init() {
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	1f 92       	push	r1
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62

	spi_init();
 2ee:	0e 94 b2 03 	call	0x764	; 0x764 <spi_init>
	mcp_reset();
 2f2:	0e 94 33 02 	call	0x466	; 0x466 <mcp_reset>
		
	//self-test
	char value;
	mcp_read(MCP_CANSTAT, &value, 1);
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	8e e0       	ldi	r24, 0x0E	; 14
 302:	0e 94 3b 02 	call	0x476	; 0x476 <mcp_read>
	if((value & MODE_MASK) != MODE_CONFIG){
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	80 7e       	andi	r24, 0xE0	; 224
 30a:	80 38       	cpi	r24, 0x80	; 128
 30c:	21 f0       	breq	.+8      	; 0x316 <can_init+0x32>
		printf_char("MCP2515 is NOT in configuration mode after reset!\n");
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <printf_char>
	}
	
	//loop back mode
	can_setMode(CAN_MODE_LOOPBACK);
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <can_setMode>
	
	char status = mcp_readStatus();
 31c:	0e 94 96 02 	call	0x52c	; 0x52c <mcp_readStatus>
	printf_int(status);
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf_int>
	printf_char("\n");
 326:	87 e3       	ldi	r24, 0x37	; 55
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <printf_char>

}
 32e:	0f 90       	pop	r0
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <can_send_message>:

void can_setMode(char mode) {
	 mcp_bitModify(CAN_REGISTER_ADDRESS_MODESELECT, CAN_MASK_MODE, mode);
}

void can_send_message(struct can_message* msg) {
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	buffer[1] = msg->length;
	for(int i = 0; i < msg->length; i++) {
		buffer[i+2] = msg->data[i];	
	}
	mcp_write(0x00, &buffer[0], structLength);
}
 34a:	ed b6       	in	r14, 0x3d	; 61
 34c:	fe b6       	in	r15, 0x3e	; 62
void can_setMode(char mode) {
	 mcp_bitModify(CAN_REGISTER_ADDRESS_MODESELECT, CAN_MASK_MODE, mode);
}

void can_send_message(struct can_message* msg) {
	int structLength = msg->length + 2;
 34e:	fc 01       	movw	r30, r24
 350:	42 81       	ldd	r20, Z+2	; 0x02
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	4e 5f       	subi	r20, 0xFE	; 254
 356:	5f 4f       	sbci	r21, 0xFF	; 255
	char buffer[structLength];
 358:	2d b7       	in	r18, 0x3d	; 61
 35a:	3e b7       	in	r19, 0x3e	; 62
 35c:	24 1b       	sub	r18, r20
 35e:	35 0b       	sbc	r19, r21
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	3e bf       	out	0x3e, r19	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	2d bf       	out	0x3d, r18	; 61
 36a:	6d b7       	in	r22, 0x3d	; 61
 36c:	7e b7       	in	r23, 0x3e	; 62
 36e:	6f 5f       	subi	r22, 0xFF	; 255
 370:	7f 4f       	sbci	r23, 0xFF	; 255
	buffer[0] = msg->id;
 372:	20 81       	ld	r18, Z
 374:	ed b7       	in	r30, 0x3d	; 61
 376:	fe b7       	in	r31, 0x3e	; 62
 378:	21 83       	std	Z+1, r18	; 0x01
	buffer[1] = msg->length;
 37a:	fc 01       	movw	r30, r24
 37c:	22 81       	ldd	r18, Z+2	; 0x02
 37e:	fb 01       	movw	r30, r22
 380:	21 83       	std	Z+1, r18	; 0x01
	for(int i = 0; i < msg->length; i++) {
 382:	fc 01       	movw	r30, r24
 384:	22 81       	ldd	r18, Z+2	; 0x02
 386:	22 23       	and	r18, r18
 388:	a1 f0       	breq	.+40     	; 0x3b2 <can_send_message+0x7c>
 38a:	dc 01       	movw	r26, r24
 38c:	13 96       	adiw	r26, 0x03	; 3
 38e:	6b 01       	movw	r12, r22
 390:	f2 e0       	ldi	r31, 0x02	; 2
 392:	cf 0e       	add	r12, r31
 394:	d1 1c       	adc	r13, r1
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
		buffer[i+2] = msg->data[i];	
 39a:	1d 91       	ld	r17, X+
 39c:	f6 01       	movw	r30, r12
 39e:	11 93       	st	Z+, r17
 3a0:	6f 01       	movw	r12, r30
void can_send_message(struct can_message* msg) {
	int structLength = msg->length + 2;
	char buffer[structLength];
	buffer[0] = msg->id;
	buffer[1] = msg->length;
	for(int i = 0; i < msg->length; i++) {
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	fc 01       	movw	r30, r24
 3a8:	02 81       	ldd	r16, Z+2	; 0x02
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	20 17       	cp	r18, r16
 3ae:	31 07       	cpc	r19, r17
 3b0:	a4 f3       	brlt	.-24     	; 0x39a <can_send_message+0x64>
		buffer[i+2] = msg->data[i];	
	}
	mcp_write(0x00, &buffer[0], structLength);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <mcp_write>
}
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	fe be       	out	0x3e, r15	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	ed be       	out	0x3d, r14	; 61
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	08 95       	ret

000003d4 <XMEM_Init>:
#define MYUBRR FOSC/16/BAUD-1

#include "main.h"

void XMEM_Init() {
	MCUCR |= (1<<SRE);
 3d4:	85 b7       	in	r24, 0x35	; 53
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 3da:	80 b7       	in	r24, 0x30	; 48
 3dc:	80 62       	ori	r24, 0x20	; 32
 3de:	80 bf       	out	0x30, r24	; 48
 3e0:	08 95       	ret

000003e2 <init>:
}

void init() {
	usart_init( MYUBRR );
 3e2:	8f e1       	ldi	r24, 0x1F	; 31
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 c4 03 	call	0x788	; 0x788 <usart_init>
	XMEM_Init();
 3ea:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <XMEM_Init>
	calibrateJoystick();
 3ee:	0e 94 45 01 	call	0x28a	; 0x28a <calibrateJoystick>
	DDRB &= ~0b0011;
 3f2:	87 b3       	in	r24, 0x17	; 23
 3f4:	8c 7f       	andi	r24, 0xFC	; 252
 3f6:	87 bb       	out	0x17, r24	; 23
	oled_init();
 3f8:	0e 94 ce 02 	call	0x59c	; 0x59c <oled_init>
	oled_reset();
 3fc:	0e 94 1d 03 	call	0x63a	; 0x63a <oled_reset>
	fdevopen(oled_putchar, usart_getchar);
 400:	69 ec       	ldi	r22, 0xC9	; 201
 402:	73 e0       	ldi	r23, 0x03	; 3
 404:	8f e4       	ldi	r24, 0x4F	; 79
 406:	93 e0       	ldi	r25, 0x03	; 3
 408:	0e 94 2b 04 	call	0x856	; 0x856 <fdevopen>
	oled_reset();
 40c:	0e 94 1d 03 	call	0x63a	; 0x63a <oled_reset>
	buttons_init();
 410:	0e 94 68 01 	call	0x2d0	; 0x2d0 <buttons_init>
	can_init();
 414:	0e 94 72 01 	call	0x2e4	; 0x2e4 <can_init>
 418:	08 95       	ret

0000041a <main>:
}

int main(void) {
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	2b 97       	sbiw	r28, 0x0b	; 11
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
	init();
 42e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <init>
 432:	0f 2e       	mov	r0, r31
 434:	f6 e5       	ldi	r31, 0x56	; 86
 436:	ff 2e       	mov	r15, r31
 438:	f0 2d       	mov	r31, r0
		//printf_char("temp\n");
		//for (int i=0;i< 7; ++i){
			//printf_int(temp[i]);
		//}
		struct can_message msg;
		msg.id = 3;
 43a:	03 e0       	ldi	r16, 0x03	; 3
 43c:	10 e0       	ldi	r17, 0x00	; 0
		msg.length = 1;
 43e:	ee 24       	eor	r14, r14
 440:	e3 94       	inc	r14
		//printf_char("temp\n");
		//for (int i=0;i< 7; ++i){
			//printf_int(temp[i]);
		//}
		struct can_message msg;
		msg.id = 3;
 442:	1a 83       	std	Y+2, r17	; 0x02
 444:	09 83       	std	Y+1, r16	; 0x01
		msg.length = 1;
 446:	eb 82       	std	Y+3, r14	; 0x03
		msg.data[0] = (uint8_t)'U'+ ++i;
 448:	fc 82       	std	Y+4, r15	; 0x04
		mcp_read(0x00, msg.data, msg.length);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	be 01       	movw	r22, r28
 450:	6c 5f       	subi	r22, 0xFC	; 252
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 3b 02 	call	0x476	; 0x476 <mcp_read>
		
		can_send_message(&msg);
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	0e 94 9b 01 	call	0x336	; 0x336 <can_send_message>
 462:	f3 94       	inc	r15
 464:	ee cf       	rjmp	.-36     	; 0x442 <main+0x28>

00000466 <mcp_reset>:

#include "mcp.h"
#include "../SPI/spi.h"

void mcp_reset() {
	spi_startTransmision();
 466:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_startTransmision>
	spi_transmitByte(MCP_RESET);
 46a:	80 ec       	ldi	r24, 0xC0	; 192
 46c:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_endTransmision();
 470:	0e 94 b9 03 	call	0x772	; 0x772 <spi_endTransmision>
 474:	08 95       	ret

00000476 <mcp_read>:
}

void mcp_read(char address, char* outputArray, int length) {
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	c8 2f       	mov	r28, r24
 484:	7b 01       	movw	r14, r22
 486:	8a 01       	movw	r16, r20
	spi_startTransmision();
 488:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_startTransmision>
	
	spi_transmitByte(MCP_READ);
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_transmitByte(address);
 492:	8c 2f       	mov	r24, r28
 494:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	

	for(int i = 0; i < length; ++i){
 498:	10 16       	cp	r1, r16
 49a:	11 06       	cpc	r1, r17
 49c:	c4 f4       	brge	.+48     	; 0x4ce <mcp_read+0x58>
 49e:	e7 01       	movw	r28, r14
 4a0:	0e 0d       	add	r16, r14
 4a2:	1f 1d       	adc	r17, r15
		outputArray[i] = spi_readByte();
 4a4:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_readByte>
 4a8:	88 83       	st	Y, r24
		if(outputArray[i] != 0) {
 4aa:	88 23       	and	r24, r24
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <mcp_read+0x50>
			printf_char("mcp_read: ");
 4ae:	89 e3       	ldi	r24, 0x39	; 57
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <printf_char>
			printf_int(outputArray[i]);
 4b6:	88 81       	ld	r24, Y
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf_int>
			printf_char("\n");
 4be:	87 e3       	ldi	r24, 0x37	; 55
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <printf_char>
 4c6:	21 96       	adiw	r28, 0x01	; 1
	
	spi_transmitByte(MCP_READ);
	spi_transmitByte(address);
	

	for(int i = 0; i < length; ++i){
 4c8:	c0 17       	cp	r28, r16
 4ca:	d1 07       	cpc	r29, r17
 4cc:	59 f7       	brne	.-42     	; 0x4a4 <mcp_read+0x2e>
			printf_int(outputArray[i]);
			printf_char("\n");
		}
	}
	
	spi_endTransmision();
 4ce:	0e 94 b9 03 	call	0x772	; 0x772 <spi_endTransmision>
}
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	08 95       	ret

000004e0 <mcp_write>:

void mcp_write(char adress, char* data, int length) {
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	c8 2f       	mov	r28, r24
 4ee:	7b 01       	movw	r14, r22
 4f0:	8a 01       	movw	r16, r20
	spi_startTransmision();
 4f2:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_startTransmision>
	
	spi_transmitByte(MCP_WRITE);
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_transmitByte(adress);
 4fc:	8c 2f       	mov	r24, r28
 4fe:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	
	for(int i = 0; i < length; ++i){
 502:	10 16       	cp	r1, r16
 504:	11 06       	cpc	r1, r17
 506:	4c f4       	brge	.+18     	; 0x51a <__stack+0x1b>
 508:	e7 01       	movw	r28, r14
 50a:	0e 0d       	add	r16, r14
 50c:	1f 1d       	adc	r17, r15
		spi_transmitByte(data[i]);
 50e:	89 91       	ld	r24, Y+
 510:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_startTransmision();
	
	spi_transmitByte(MCP_WRITE);
	spi_transmitByte(adress);
	
	for(int i = 0; i < length; ++i){
 514:	c0 17       	cp	r28, r16
 516:	d1 07       	cpc	r29, r17
 518:	d1 f7       	brne	.-12     	; 0x50e <__stack+0xf>
		spi_transmitByte(data[i]);
	}
	
	spi_endTransmision();
 51a:	0e 94 b9 03 	call	0x772	; 0x772 <spi_endTransmision>
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	08 95       	ret

0000052c <mcp_readStatus>:
	}
	
	spi_endTransmision();
}

char mcp_readStatus() {
 52c:	cf 93       	push	r28
	//allows single instruction access to some of the often used status bits (for message reception and transmission)
	spi_startTransmision();
 52e:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_startTransmision>
	
	spi_transmitByte(MCP_READ_STATUS);
 532:	80 ea       	ldi	r24, 0xA0	; 160
 534:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	
	char tmp = spi_readByte();
 538:	0e 94 bf 03 	call	0x77e	; 0x77e <spi_readByte>
 53c:	c8 2f       	mov	r28, r24
	
	spi_endTransmision();
 53e:	0e 94 b9 03 	call	0x772	; 0x772 <spi_endTransmision>
	
	return tmp;
}
 542:	8c 2f       	mov	r24, r28
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <mcp_bitModify>:

void mcp_bitModify(char adress, char mask, char data) {
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	18 2f       	mov	r17, r24
 550:	d6 2f       	mov	r29, r22
 552:	c4 2f       	mov	r28, r20
	spi_startTransmision();
 554:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_startTransmision>
	spi_transmitByte(MCP_BITMOD);
 558:	85 e0       	ldi	r24, 0x05	; 5
 55a:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_transmitByte(adress);
 55e:	81 2f       	mov	r24, r17
 560:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_transmitByte(mask);
 564:	8d 2f       	mov	r24, r29
 566:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_transmitByte(data);
 56a:	8c 2f       	mov	r24, r28
 56c:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	spi_endTransmision();
 570:	0e 94 b9 03 	call	0x772	; 0x772 <spi_endTransmision>
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	08 95       	ret

0000057c <fonts_getStrip>:
 */ 

#include "fonts.h"

unsigned char fonts_getStrip(char character, char stripNo){
	character -= ' ';
 57c:	80 52       	subi	r24, 0x20	; 32
	unsigned char temp = (pgm_read_word(&font5[character][stripNo]));
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	e8 0f       	add	r30, r24
 58c:	f9 1f       	adc	r31, r25
 58e:	e6 0f       	add	r30, r22
 590:	f1 1d       	adc	r31, r1
 592:	e0 59       	subi	r30, 0x90	; 144
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	85 91       	lpm	r24, Z+
 598:	94 91       	lpm	r25, Z
	return temp;
 59a:	08 95       	ret

0000059c <oled_init>:
	oled_write_c(0xaf);  //display on
}

void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
 59c:	e0 e0       	ldi	r30, 0x00	; 0
 59e:	f0 e1       	ldi	r31, 0x10	; 16
 5a0:	8e ea       	ldi	r24, 0xAE	; 174
 5a2:	80 83       	st	Z, r24
 5a4:	81 ea       	ldi	r24, 0xA1	; 161
 5a6:	80 83       	st	Z, r24
 5a8:	8a ed       	ldi	r24, 0xDA	; 218
 5aa:	80 83       	st	Z, r24
 5ac:	82 e1       	ldi	r24, 0x12	; 18
 5ae:	80 83       	st	Z, r24
 5b0:	88 ec       	ldi	r24, 0xC8	; 200
 5b2:	80 83       	st	Z, r24
 5b4:	88 ea       	ldi	r24, 0xA8	; 168
 5b6:	80 83       	st	Z, r24
 5b8:	8f e3       	ldi	r24, 0x3F	; 63
 5ba:	80 83       	st	Z, r24
 5bc:	85 ed       	ldi	r24, 0xD5	; 213
 5be:	80 83       	st	Z, r24
 5c0:	80 e8       	ldi	r24, 0x80	; 128
 5c2:	80 83       	st	Z, r24
 5c4:	81 e8       	ldi	r24, 0x81	; 129
 5c6:	80 83       	st	Z, r24
 5c8:	80 e5       	ldi	r24, 0x50	; 80
 5ca:	80 83       	st	Z, r24
 5cc:	89 ed       	ldi	r24, 0xD9	; 217
 5ce:	80 83       	st	Z, r24
 5d0:	81 e2       	ldi	r24, 0x21	; 33
 5d2:	80 83       	st	Z, r24
 5d4:	80 e2       	ldi	r24, 0x20	; 32
 5d6:	80 83       	st	Z, r24
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	80 83       	st	Z, r24
 5dc:	8b ed       	ldi	r24, 0xDB	; 219
 5de:	80 83       	st	Z, r24
 5e0:	80 e3       	ldi	r24, 0x30	; 48
 5e2:	80 83       	st	Z, r24
 5e4:	8d ea       	ldi	r24, 0xAD	; 173
 5e6:	80 83       	st	Z, r24
 5e8:	10 82       	st	Z, r1
 5ea:	84 ea       	ldi	r24, 0xA4	; 164
 5ec:	80 83       	st	Z, r24
 5ee:	86 ea       	ldi	r24, 0xA6	; 166
 5f0:	80 83       	st	Z, r24
 5f2:	8f ea       	ldi	r24, 0xAF	; 175
 5f4:	80 83       	st	Z, r24
 5f6:	08 95       	ret

000005f8 <oled_goto_line>:
		oled_clear_line(i);
	}
}

void oled_goto_line(char line) {
	if(line < 8) {
 5f8:	88 30       	cpi	r24, 0x08	; 8
 5fa:	90 f4       	brcc	.+36     	; 0x620 <oled_goto_line+0x28>
		oled_write_c(0xB0 + line);
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	9c 01       	movw	r18, r24
 600:	20 55       	subi	r18, 0x50	; 80
 602:	3f 4f       	sbci	r19, 0xFF	; 255
	oled_write_c(0xaf);  //display on
}

void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
 604:	e0 e0       	ldi	r30, 0x00	; 0
 606:	f0 e1       	ldi	r31, 0x10	; 16
 608:	20 83       	st	Z, r18
 60a:	10 82       	st	Z, r1
 60c:	20 e1       	ldi	r18, 0x10	; 16
 60e:	20 83       	st	Z, r18
void oled_goto_line(char line) {
	if(line < 8) {
		oled_write_c(0xB0 + line);
		oled_write_c(0x00); //set lower column
		oled_write_c(0x10);
		CURRENT_LINE = line;
 610:	90 93 48 01 	sts	0x0148, r25
 614:	80 93 47 01 	sts	0x0147, r24
		CURRENT_COL = 0;
 618:	10 92 46 01 	sts	0x0146, r1
 61c:	10 92 45 01 	sts	0x0145, r1
 620:	08 95       	ret

00000622 <oled_clear_line>:
		CURRENT_COL = column;
	}
}

void oled_clear_line(char line) {
	oled_goto_line(line);
 622:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <oled_goto_line>
 626:	80 e8       	ldi	r24, 0x80	; 128
 628:	90 e0       	ldi	r25, 0x00	; 0
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
 62a:	e0 e0       	ldi	r30, 0x00	; 0
 62c:	f2 e1       	ldi	r31, 0x12	; 18
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	20 83       	st	Z, r18
 632:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_line(char line) {
	oled_goto_line(line);
	for(int i = 0; i < 128; i++) {
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	e1 f7       	brne	.-8      	; 0x630 <oled_clear_line+0xe>
		oled_print_strip(0x01);
	}
}
 638:	08 95       	ret

0000063a <oled_reset>:
void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
}

void oled_reset() {
 63a:	cf 93       	push	r28
 63c:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i = 0; i < 8; i++) {
		oled_clear_line(i);
 63e:	8c 2f       	mov	r24, r28
 640:	0e 94 11 03 	call	0x622	; 0x622 <oled_clear_line>
 644:	cf 5f       	subi	r28, 0xFF	; 255
	volatile char* ptr = OLED_C;
	*ptr = (input);
}

void oled_reset() {
	for(int i = 0; i < 8; i++) {
 646:	c8 30       	cpi	r28, 0x08	; 8
 648:	d1 f7       	brne	.-12     	; 0x63e <oled_reset+0x4>
		oled_clear_line(i);
	}
}
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <oled_printchar>:
void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
}

void oled_printchar(char input) {
 64e:	df 92       	push	r13
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
	char temp;
	char mask = 0x00;

	if (printmode == INVERSE){
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	20 91 44 01 	lds	r18, 0x0144
 662:	21 30       	cpi	r18, 0x01	; 1
 664:	09 f0       	breq	.+2      	; 0x668 <oled_printchar+0x1a>
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	d9 2e       	mov	r13, r25
 66a:	d1 94       	neg	r13
		mask = 0xFF;
	}
	for(int i =0; i<5 ; ++i){
 66c:	c0 e0       	ldi	r28, 0x00	; 0
 66e:	d0 e0       	ldi	r29, 0x00	; 0
		temp = fonts_getStrip(input, i);
 670:	e8 2e       	mov	r14, r24
 672:	f1 2c       	mov	r15, r1
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
 674:	00 e0       	ldi	r16, 0x00	; 0
 676:	12 e1       	ldi	r17, 0x12	; 18

	if (printmode == INVERSE){
		mask = 0xFF;
	}
	for(int i =0; i<5 ; ++i){
		temp = fonts_getStrip(input, i);
 678:	be 01       	movw	r22, r28
 67a:	c7 01       	movw	r24, r14
 67c:	0e 94 be 02 	call	0x57c	; 0x57c <fonts_getStrip>
		oled_print_strip(temp^mask);
 680:	8d 25       	eor	r24, r13
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
 682:	f8 01       	movw	r30, r16
 684:	80 83       	st	Z, r24
	char mask = 0x00;

	if (printmode == INVERSE){
		mask = 0xFF;
	}
	for(int i =0; i<5 ; ++i){
 686:	21 96       	adiw	r28, 0x01	; 1
 688:	c5 30       	cpi	r28, 0x05	; 5
 68a:	d1 05       	cpc	r29, r1
 68c:	a9 f7       	brne	.-22     	; 0x678 <oled_printchar+0x2a>
		temp = fonts_getStrip(input, i);
		oled_print_strip(temp^mask);
	}
}
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	ff 90       	pop	r15
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	08 95       	ret

0000069e <oled_putchar>:

int oled_putchar(unsigned char input) {
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	18 2f       	mov	r17, r24
	if(input =='\n' || CURRENT_COL/5 >=25){
 6a6:	8a 30       	cpi	r24, 0x0A	; 10
 6a8:	41 f0       	breq	.+16     	; 0x6ba <oled_putchar+0x1c>
 6aa:	20 91 45 01 	lds	r18, 0x0145
 6ae:	30 91 46 01 	lds	r19, 0x0146
 6b2:	2d 37       	cpi	r18, 0x7D	; 125
 6b4:	31 05       	cpc	r19, r1
 6b6:	0c f4       	brge	.+2      	; 0x6ba <oled_putchar+0x1c>
 6b8:	4e c0       	rjmp	.+156    	; 0x756 <oled_putchar+0xb8>
		CURRENT_LINE = ++CURRENT_LINE%8;
 6ba:	20 91 47 01 	lds	r18, 0x0147
 6be:	30 91 48 01 	lds	r19, 0x0148
 6c2:	2f 5f       	subi	r18, 0xFF	; 255
 6c4:	3f 4f       	sbci	r19, 0xFF	; 255
 6c6:	27 70       	andi	r18, 0x07	; 7
 6c8:	30 78       	andi	r19, 0x80	; 128
 6ca:	33 23       	and	r19, r19
 6cc:	34 f4       	brge	.+12     	; 0x6da <oled_putchar+0x3c>
 6ce:	21 50       	subi	r18, 0x01	; 1
 6d0:	31 09       	sbc	r19, r1
 6d2:	28 6f       	ori	r18, 0xF8	; 248
 6d4:	3f 6f       	ori	r19, 0xFF	; 255
 6d6:	2f 5f       	subi	r18, 0xFF	; 255
 6d8:	3f 4f       	sbci	r19, 0xFF	; 255
 6da:	30 93 48 01 	sts	0x0148, r19
 6de:	20 93 47 01 	sts	0x0147, r18
		for (int i = CURRENT_COL; i < 128; ++i){
 6e2:	20 91 45 01 	lds	r18, 0x0145
 6e6:	30 91 46 01 	lds	r19, 0x0146
 6ea:	20 38       	cpi	r18, 0x80	; 128
 6ec:	31 05       	cpc	r19, r1
 6ee:	44 f4       	brge	.+16     	; 0x700 <oled_putchar+0x62>
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
 6f0:	e0 e0       	ldi	r30, 0x00	; 0
 6f2:	f2 e1       	ldi	r31, 0x12	; 18
 6f4:	10 82       	st	Z, r1
}

int oled_putchar(unsigned char input) {
	if(input =='\n' || CURRENT_COL/5 >=25){
		CURRENT_LINE = ++CURRENT_LINE%8;
		for (int i = CURRENT_COL; i < 128; ++i){
 6f6:	2f 5f       	subi	r18, 0xFF	; 255
 6f8:	3f 4f       	sbci	r19, 0xFF	; 255
 6fa:	20 38       	cpi	r18, 0x80	; 128
 6fc:	31 05       	cpc	r19, r1
 6fe:	d1 f7       	brne	.-12     	; 0x6f4 <oled_putchar+0x56>
			oled_print_strip(0x00);
		}
		oled_goto_line(CURRENT_LINE);
 700:	c7 e4       	ldi	r28, 0x47	; 71
 702:	d1 e0       	ldi	r29, 0x01	; 1
 704:	88 81       	ld	r24, Y
 706:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <oled_goto_line>
		usart_putchar('a');
 70a:	81 e6       	ldi	r24, 0x61	; 97
 70c:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
		usart_putchar('0' + CURRENT_LINE);
 710:	88 81       	ld	r24, Y
 712:	80 5d       	subi	r24, 0xD0	; 208
 714:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
		usart_putchar('\n');
 718:	8a e0       	ldi	r24, 0x0A	; 10
 71a:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
		CURRENT_COL=0;
 71e:	10 92 46 01 	sts	0x0146, r1
 722:	10 92 45 01 	sts	0x0145, r1
	}
	usart_putchar(input);
 726:	81 2f       	mov	r24, r17
 728:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
	if(input =='\n') return input;
 72c:	1a 30       	cpi	r17, 0x0A	; 10
 72e:	81 f0       	breq	.+32     	; 0x750 <oled_putchar+0xb2>
	oled_printchar(input);
 730:	81 2f       	mov	r24, r17
 732:	0e 94 27 03 	call	0x64e	; 0x64e <oled_printchar>

	CURRENT_COL+=5;
 736:	20 91 45 01 	lds	r18, 0x0145
 73a:	30 91 46 01 	lds	r19, 0x0146
 73e:	2b 5f       	subi	r18, 0xFB	; 251
 740:	3f 4f       	sbci	r19, 0xFF	; 255
 742:	30 93 46 01 	sts	0x0146, r19
 746:	20 93 45 01 	sts	0x0145, r18
	return input;
 74a:	81 2f       	mov	r24, r17
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	06 c0       	rjmp	.+12     	; 0x75c <oled_putchar+0xbe>
		usart_putchar('0' + CURRENT_LINE);
		usart_putchar('\n');
		CURRENT_COL=0;
	}
	usart_putchar(input);
	if(input =='\n') return input;
 750:	8a e0       	ldi	r24, 0x0A	; 10
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	03 c0       	rjmp	.+6      	; 0x75c <oled_putchar+0xbe>
		usart_putchar('a');
		usart_putchar('0' + CURRENT_LINE);
		usart_putchar('\n');
		CURRENT_COL=0;
	}
	usart_putchar(input);
 756:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
 75a:	ea cf       	rjmp	.-44     	; 0x730 <oled_putchar+0x92>
	if(input =='\n') return input;
	oled_printchar(input);

	CURRENT_COL+=5;
	return input;
}
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	08 95       	ret

00000764 <spi_init>:
#include "spi.h"

void spi_init() {
	
	/* Set MOSI and SCK and SS output, all others input */
	DDRB = (1<<PB5)|(1<<PB7)|(1<<PB4);
 764:	80 eb       	ldi	r24, 0xB0	; 176
 766:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 768:	81 e5       	ldi	r24, 0x51	; 81
 76a:	8d b9       	out	0x0d, r24	; 13
 76c:	08 95       	ret

0000076e <spi_startTransmision>:
}

void spi_startTransmision() {
	//put SS-Signal to low
	CLEAR_BIT(PORTB, PB4);
 76e:	c4 98       	cbi	0x18, 4	; 24
 770:	08 95       	ret

00000772 <spi_endTransmision>:
}

void spi_endTransmision() {
	//put SS-Signal to high
	SET_BIT(PORTB, PB4);
 772:	c4 9a       	sbi	0x18, 4	; 24
 774:	08 95       	ret

00000776 <spi_transmitByte>:
}

void spi_transmitByte(char byte) {
	
	SPDR = byte;
 776:	8f b9       	out	0x0f, r24	; 15
	while( ! (SPSR & (1<<SPIF))) {
 778:	77 9b       	sbis	0x0e, 7	; 14
 77a:	fe cf       	rjmp	.-4      	; 0x778 <spi_transmitByte+0x2>
	}

}
 77c:	08 95       	ret

0000077e <spi_readByte>:

char spi_readByte() {
	
	spi_transmitByte(0x00);
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0e 94 bb 03 	call	0x776	; 0x776 <spi_transmitByte>
	char tmp = SPDR;
 784:	8f b1       	in	r24, 0x0f	; 15
	
	return tmp;
}
 786:	08 95       	ret

00000788 <usart_init>:

#include "usart.h"

void usart_init( unsigned int ubrr ) {
	// set the baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 788:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
 78a:	89 b9       	out	0x09, r24	; 9
	// enable reciever and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 78c:	88 e1       	ldi	r24, 0x18	; 24
 78e:	8a b9       	out	0x0a, r24	; 10
 790:	08 95       	ret

00000792 <usart_getchar>:
	//fdevopen(USART_putchar, USART_getchar);
}

int usart_getchar() {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 792:	5f 9b       	sbis	0x0b, 7	; 11
 794:	fe cf       	rjmp	.-4      	; 0x792 <usart_getchar>
	/* Get and return received data from buffer */
	return UDR0;
 796:	8c b1       	in	r24, 0x0c	; 12
}
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	08 95       	ret

0000079c <usart_putchar>:

int usart_putchar(unsigned char data) {
	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
 79c:	5d 9b       	sbis	0x0b, 5	; 11
 79e:	fe cf       	rjmp	.-4      	; 0x79c <usart_putchar>
	// put data into buffer, sends the data
	UDR0 = data;
 7a0:	8c b9       	out	0x0c, r24	; 12
	return data;
}
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	08 95       	ret

000007a6 <printf_char>:

void printf_char(char* string) {
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	ec 01       	movw	r28, r24
	for (int i = 0; string[i] != '\0'; ++i) {
 7ac:	88 81       	ld	r24, Y
 7ae:	88 23       	and	r24, r24
 7b0:	31 f0       	breq	.+12     	; 0x7be <printf_char+0x18>
 7b2:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(string[i]);
 7b4:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
	UDR0 = data;
	return data;
}

void printf_char(char* string) {
	for (int i = 0; string[i] != '\0'; ++i) {
 7b8:	89 91       	ld	r24, Y+
 7ba:	81 11       	cpse	r24, r1
 7bc:	fb cf       	rjmp	.-10     	; 0x7b4 <printf_char+0xe>
		usart_putchar(string[i]);
	}
}
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <printf_int>:

void printf_int(int input) {
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	ec 01       	movw	r28, r24
	if (input<0){
 7ca:	99 23       	and	r25, r25
 7cc:	34 f4       	brge	.+12     	; 0x7da <printf_int+0x16>
		input *=-1;
 7ce:	d1 95       	neg	r29
 7d0:	c1 95       	neg	r28
 7d2:	d1 09       	sbc	r29, r1
		usart_putchar('-');
 7d4:	8d e2       	ldi	r24, 0x2D	; 45
 7d6:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
	}
	if(input/10 > 0)
 7da:	ca 30       	cpi	r28, 0x0A	; 10
 7dc:	d1 05       	cpc	r29, r1
 7de:	44 f0       	brlt	.+16     	; 0x7f0 <printf_int+0x2c>
	printf_int(input/10);
 7e0:	ce 01       	movw	r24, r28
 7e2:	6a e0       	ldi	r22, 0x0A	; 10
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	0e 94 03 04 	call	0x806	; 0x806 <__divmodhi4>
 7ea:	cb 01       	movw	r24, r22
 7ec:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf_int>
	usart_putchar((unsigned char) (input%10) + '0');
 7f0:	ce 01       	movw	r24, r28
 7f2:	6a e0       	ldi	r22, 0x0A	; 10
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	0e 94 03 04 	call	0x806	; 0x806 <__divmodhi4>
 7fa:	80 5d       	subi	r24, 0xD0	; 208
 7fc:	0e 94 ce 03 	call	0x79c	; 0x79c <usart_putchar>
}
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <__divmodhi4>:
 806:	97 fb       	bst	r25, 7
 808:	07 2e       	mov	r0, r23
 80a:	16 f4       	brtc	.+4      	; 0x810 <__divmodhi4+0xa>
 80c:	00 94       	com	r0
 80e:	07 d0       	rcall	.+14     	; 0x81e <__divmodhi4_neg1>
 810:	77 fd       	sbrc	r23, 7
 812:	09 d0       	rcall	.+18     	; 0x826 <__divmodhi4_neg2>
 814:	0e 94 17 04 	call	0x82e	; 0x82e <__udivmodhi4>
 818:	07 fc       	sbrc	r0, 7
 81a:	05 d0       	rcall	.+10     	; 0x826 <__divmodhi4_neg2>
 81c:	3e f4       	brtc	.+14     	; 0x82c <__divmodhi4_exit>

0000081e <__divmodhi4_neg1>:
 81e:	90 95       	com	r25
 820:	81 95       	neg	r24
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	08 95       	ret

00000826 <__divmodhi4_neg2>:
 826:	70 95       	com	r23
 828:	61 95       	neg	r22
 82a:	7f 4f       	sbci	r23, 0xFF	; 255

0000082c <__divmodhi4_exit>:
 82c:	08 95       	ret

0000082e <__udivmodhi4>:
 82e:	aa 1b       	sub	r26, r26
 830:	bb 1b       	sub	r27, r27
 832:	51 e1       	ldi	r21, 0x11	; 17
 834:	07 c0       	rjmp	.+14     	; 0x844 <__udivmodhi4_ep>

00000836 <__udivmodhi4_loop>:
 836:	aa 1f       	adc	r26, r26
 838:	bb 1f       	adc	r27, r27
 83a:	a6 17       	cp	r26, r22
 83c:	b7 07       	cpc	r27, r23
 83e:	10 f0       	brcs	.+4      	; 0x844 <__udivmodhi4_ep>
 840:	a6 1b       	sub	r26, r22
 842:	b7 0b       	sbc	r27, r23

00000844 <__udivmodhi4_ep>:
 844:	88 1f       	adc	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	5a 95       	dec	r21
 84a:	a9 f7       	brne	.-22     	; 0x836 <__udivmodhi4_loop>
 84c:	80 95       	com	r24
 84e:	90 95       	com	r25
 850:	bc 01       	movw	r22, r24
 852:	cd 01       	movw	r24, r26
 854:	08 95       	ret

00000856 <fdevopen>:
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	ec 01       	movw	r28, r24
 860:	8b 01       	movw	r16, r22
 862:	00 97       	sbiw	r24, 0x00	; 0
 864:	31 f4       	brne	.+12     	; 0x872 <fdevopen+0x1c>
 866:	61 15       	cp	r22, r1
 868:	71 05       	cpc	r23, r1
 86a:	19 f4       	brne	.+6      	; 0x872 <fdevopen+0x1c>
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	38 c0       	rjmp	.+112    	; 0x8e2 <fdevopen+0x8c>
 872:	6e e0       	ldi	r22, 0x0E	; 14
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 76 04 	call	0x8ec	; 0x8ec <calloc>
 87e:	fc 01       	movw	r30, r24
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	a1 f3       	breq	.-24     	; 0x86c <fdevopen+0x16>
 884:	80 e8       	ldi	r24, 0x80	; 128
 886:	83 83       	std	Z+3, r24	; 0x03
 888:	01 15       	cp	r16, r1
 88a:	11 05       	cpc	r17, r1
 88c:	71 f0       	breq	.+28     	; 0x8aa <fdevopen+0x54>
 88e:	13 87       	std	Z+11, r17	; 0x0b
 890:	02 87       	std	Z+10, r16	; 0x0a
 892:	81 e8       	ldi	r24, 0x81	; 129
 894:	83 83       	std	Z+3, r24	; 0x03
 896:	80 91 51 01 	lds	r24, 0x0151
 89a:	90 91 52 01 	lds	r25, 0x0152
 89e:	89 2b       	or	r24, r25
 8a0:	21 f4       	brne	.+8      	; 0x8aa <fdevopen+0x54>
 8a2:	f0 93 52 01 	sts	0x0152, r31
 8a6:	e0 93 51 01 	sts	0x0151, r30
 8aa:	20 97       	sbiw	r28, 0x00	; 0
 8ac:	c9 f0       	breq	.+50     	; 0x8e0 <fdevopen+0x8a>
 8ae:	d1 87       	std	Z+9, r29	; 0x09
 8b0:	c0 87       	std	Z+8, r28	; 0x08
 8b2:	83 81       	ldd	r24, Z+3	; 0x03
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	83 83       	std	Z+3, r24	; 0x03
 8b8:	80 91 53 01 	lds	r24, 0x0153
 8bc:	90 91 54 01 	lds	r25, 0x0154
 8c0:	89 2b       	or	r24, r25
 8c2:	71 f4       	brne	.+28     	; 0x8e0 <fdevopen+0x8a>
 8c4:	f0 93 54 01 	sts	0x0154, r31
 8c8:	e0 93 53 01 	sts	0x0153, r30
 8cc:	80 91 55 01 	lds	r24, 0x0155
 8d0:	90 91 56 01 	lds	r25, 0x0156
 8d4:	89 2b       	or	r24, r25
 8d6:	21 f4       	brne	.+8      	; 0x8e0 <fdevopen+0x8a>
 8d8:	f0 93 56 01 	sts	0x0156, r31
 8dc:	e0 93 55 01 	sts	0x0155, r30
 8e0:	cf 01       	movw	r24, r30
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	1f 91       	pop	r17
 8e8:	0f 91       	pop	r16
 8ea:	08 95       	ret

000008ec <calloc>:
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	86 9f       	mul	r24, r22
 8f6:	80 01       	movw	r16, r0
 8f8:	87 9f       	mul	r24, r23
 8fa:	10 0d       	add	r17, r0
 8fc:	96 9f       	mul	r25, r22
 8fe:	10 0d       	add	r17, r0
 900:	11 24       	eor	r1, r1
 902:	c8 01       	movw	r24, r16
 904:	0e 94 92 04 	call	0x924	; 0x924 <malloc>
 908:	ec 01       	movw	r28, r24
 90a:	00 97       	sbiw	r24, 0x00	; 0
 90c:	29 f0       	breq	.+10     	; 0x918 <calloc+0x2c>
 90e:	a8 01       	movw	r20, r16
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	0e 94 b9 05 	call	0xb72	; 0xb72 <memset>
 918:	ce 01       	movw	r24, r28
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	0f 91       	pop	r16
 922:	08 95       	ret

00000924 <malloc>:
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	91 05       	cpc	r25, r1
 92c:	10 f4       	brcc	.+4      	; 0x932 <malloc+0xe>
 92e:	82 e0       	ldi	r24, 0x02	; 2
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	e0 91 59 01 	lds	r30, 0x0159
 936:	f0 91 5a 01 	lds	r31, 0x015A
 93a:	20 e0       	ldi	r18, 0x00	; 0
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	a0 e0       	ldi	r26, 0x00	; 0
 940:	b0 e0       	ldi	r27, 0x00	; 0
 942:	30 97       	sbiw	r30, 0x00	; 0
 944:	39 f1       	breq	.+78     	; 0x994 <malloc+0x70>
 946:	40 81       	ld	r20, Z
 948:	51 81       	ldd	r21, Z+1	; 0x01
 94a:	48 17       	cp	r20, r24
 94c:	59 07       	cpc	r21, r25
 94e:	b8 f0       	brcs	.+46     	; 0x97e <malloc+0x5a>
 950:	48 17       	cp	r20, r24
 952:	59 07       	cpc	r21, r25
 954:	71 f4       	brne	.+28     	; 0x972 <malloc+0x4e>
 956:	82 81       	ldd	r24, Z+2	; 0x02
 958:	93 81       	ldd	r25, Z+3	; 0x03
 95a:	10 97       	sbiw	r26, 0x00	; 0
 95c:	29 f0       	breq	.+10     	; 0x968 <malloc+0x44>
 95e:	13 96       	adiw	r26, 0x03	; 3
 960:	9c 93       	st	X, r25
 962:	8e 93       	st	-X, r24
 964:	12 97       	sbiw	r26, 0x02	; 2
 966:	2c c0       	rjmp	.+88     	; 0x9c0 <malloc+0x9c>
 968:	90 93 5a 01 	sts	0x015A, r25
 96c:	80 93 59 01 	sts	0x0159, r24
 970:	27 c0       	rjmp	.+78     	; 0x9c0 <malloc+0x9c>
 972:	21 15       	cp	r18, r1
 974:	31 05       	cpc	r19, r1
 976:	31 f0       	breq	.+12     	; 0x984 <malloc+0x60>
 978:	42 17       	cp	r20, r18
 97a:	53 07       	cpc	r21, r19
 97c:	18 f0       	brcs	.+6      	; 0x984 <malloc+0x60>
 97e:	a9 01       	movw	r20, r18
 980:	db 01       	movw	r26, r22
 982:	01 c0       	rjmp	.+2      	; 0x986 <malloc+0x62>
 984:	ef 01       	movw	r28, r30
 986:	9a 01       	movw	r18, r20
 988:	bd 01       	movw	r22, r26
 98a:	df 01       	movw	r26, r30
 98c:	02 80       	ldd	r0, Z+2	; 0x02
 98e:	f3 81       	ldd	r31, Z+3	; 0x03
 990:	e0 2d       	mov	r30, r0
 992:	d7 cf       	rjmp	.-82     	; 0x942 <malloc+0x1e>
 994:	21 15       	cp	r18, r1
 996:	31 05       	cpc	r19, r1
 998:	f9 f0       	breq	.+62     	; 0x9d8 <malloc+0xb4>
 99a:	28 1b       	sub	r18, r24
 99c:	39 0b       	sbc	r19, r25
 99e:	24 30       	cpi	r18, 0x04	; 4
 9a0:	31 05       	cpc	r19, r1
 9a2:	80 f4       	brcc	.+32     	; 0x9c4 <malloc+0xa0>
 9a4:	8a 81       	ldd	r24, Y+2	; 0x02
 9a6:	9b 81       	ldd	r25, Y+3	; 0x03
 9a8:	61 15       	cp	r22, r1
 9aa:	71 05       	cpc	r23, r1
 9ac:	21 f0       	breq	.+8      	; 0x9b6 <malloc+0x92>
 9ae:	fb 01       	movw	r30, r22
 9b0:	93 83       	std	Z+3, r25	; 0x03
 9b2:	82 83       	std	Z+2, r24	; 0x02
 9b4:	04 c0       	rjmp	.+8      	; 0x9be <malloc+0x9a>
 9b6:	90 93 5a 01 	sts	0x015A, r25
 9ba:	80 93 59 01 	sts	0x0159, r24
 9be:	fe 01       	movw	r30, r28
 9c0:	32 96       	adiw	r30, 0x02	; 2
 9c2:	44 c0       	rjmp	.+136    	; 0xa4c <malloc+0x128>
 9c4:	fe 01       	movw	r30, r28
 9c6:	e2 0f       	add	r30, r18
 9c8:	f3 1f       	adc	r31, r19
 9ca:	81 93       	st	Z+, r24
 9cc:	91 93       	st	Z+, r25
 9ce:	22 50       	subi	r18, 0x02	; 2
 9d0:	31 09       	sbc	r19, r1
 9d2:	39 83       	std	Y+1, r19	; 0x01
 9d4:	28 83       	st	Y, r18
 9d6:	3a c0       	rjmp	.+116    	; 0xa4c <malloc+0x128>
 9d8:	20 91 57 01 	lds	r18, 0x0157
 9dc:	30 91 58 01 	lds	r19, 0x0158
 9e0:	23 2b       	or	r18, r19
 9e2:	41 f4       	brne	.+16     	; 0x9f4 <malloc+0xd0>
 9e4:	20 91 02 01 	lds	r18, 0x0102
 9e8:	30 91 03 01 	lds	r19, 0x0103
 9ec:	30 93 58 01 	sts	0x0158, r19
 9f0:	20 93 57 01 	sts	0x0157, r18
 9f4:	20 91 00 01 	lds	r18, 0x0100
 9f8:	30 91 01 01 	lds	r19, 0x0101
 9fc:	21 15       	cp	r18, r1
 9fe:	31 05       	cpc	r19, r1
 a00:	41 f4       	brne	.+16     	; 0xa12 <malloc+0xee>
 a02:	2d b7       	in	r18, 0x3d	; 61
 a04:	3e b7       	in	r19, 0x3e	; 62
 a06:	40 91 04 01 	lds	r20, 0x0104
 a0a:	50 91 05 01 	lds	r21, 0x0105
 a0e:	24 1b       	sub	r18, r20
 a10:	35 0b       	sbc	r19, r21
 a12:	e0 91 57 01 	lds	r30, 0x0157
 a16:	f0 91 58 01 	lds	r31, 0x0158
 a1a:	e2 17       	cp	r30, r18
 a1c:	f3 07       	cpc	r31, r19
 a1e:	a0 f4       	brcc	.+40     	; 0xa48 <malloc+0x124>
 a20:	2e 1b       	sub	r18, r30
 a22:	3f 0b       	sbc	r19, r31
 a24:	28 17       	cp	r18, r24
 a26:	39 07       	cpc	r19, r25
 a28:	78 f0       	brcs	.+30     	; 0xa48 <malloc+0x124>
 a2a:	ac 01       	movw	r20, r24
 a2c:	4e 5f       	subi	r20, 0xFE	; 254
 a2e:	5f 4f       	sbci	r21, 0xFF	; 255
 a30:	24 17       	cp	r18, r20
 a32:	35 07       	cpc	r19, r21
 a34:	48 f0       	brcs	.+18     	; 0xa48 <malloc+0x124>
 a36:	4e 0f       	add	r20, r30
 a38:	5f 1f       	adc	r21, r31
 a3a:	50 93 58 01 	sts	0x0158, r21
 a3e:	40 93 57 01 	sts	0x0157, r20
 a42:	81 93       	st	Z+, r24
 a44:	91 93       	st	Z+, r25
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <malloc+0x128>
 a48:	e0 e0       	ldi	r30, 0x00	; 0
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	cf 01       	movw	r24, r30
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	08 95       	ret

00000a54 <free>:
 a54:	cf 93       	push	r28
 a56:	df 93       	push	r29
 a58:	00 97       	sbiw	r24, 0x00	; 0
 a5a:	09 f4       	brne	.+2      	; 0xa5e <free+0xa>
 a5c:	87 c0       	rjmp	.+270    	; 0xb6c <free+0x118>
 a5e:	fc 01       	movw	r30, r24
 a60:	32 97       	sbiw	r30, 0x02	; 2
 a62:	13 82       	std	Z+3, r1	; 0x03
 a64:	12 82       	std	Z+2, r1	; 0x02
 a66:	c0 91 59 01 	lds	r28, 0x0159
 a6a:	d0 91 5a 01 	lds	r29, 0x015A
 a6e:	20 97       	sbiw	r28, 0x00	; 0
 a70:	81 f4       	brne	.+32     	; 0xa92 <free+0x3e>
 a72:	20 81       	ld	r18, Z
 a74:	31 81       	ldd	r19, Z+1	; 0x01
 a76:	28 0f       	add	r18, r24
 a78:	39 1f       	adc	r19, r25
 a7a:	80 91 57 01 	lds	r24, 0x0157
 a7e:	90 91 58 01 	lds	r25, 0x0158
 a82:	82 17       	cp	r24, r18
 a84:	93 07       	cpc	r25, r19
 a86:	79 f5       	brne	.+94     	; 0xae6 <free+0x92>
 a88:	f0 93 58 01 	sts	0x0158, r31
 a8c:	e0 93 57 01 	sts	0x0157, r30
 a90:	6d c0       	rjmp	.+218    	; 0xb6c <free+0x118>
 a92:	de 01       	movw	r26, r28
 a94:	20 e0       	ldi	r18, 0x00	; 0
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	ae 17       	cp	r26, r30
 a9a:	bf 07       	cpc	r27, r31
 a9c:	50 f4       	brcc	.+20     	; 0xab2 <free+0x5e>
 a9e:	12 96       	adiw	r26, 0x02	; 2
 aa0:	4d 91       	ld	r20, X+
 aa2:	5c 91       	ld	r21, X
 aa4:	13 97       	sbiw	r26, 0x03	; 3
 aa6:	9d 01       	movw	r18, r26
 aa8:	41 15       	cp	r20, r1
 aaa:	51 05       	cpc	r21, r1
 aac:	09 f1       	breq	.+66     	; 0xaf0 <free+0x9c>
 aae:	da 01       	movw	r26, r20
 ab0:	f3 cf       	rjmp	.-26     	; 0xa98 <free+0x44>
 ab2:	b3 83       	std	Z+3, r27	; 0x03
 ab4:	a2 83       	std	Z+2, r26	; 0x02
 ab6:	40 81       	ld	r20, Z
 ab8:	51 81       	ldd	r21, Z+1	; 0x01
 aba:	84 0f       	add	r24, r20
 abc:	95 1f       	adc	r25, r21
 abe:	8a 17       	cp	r24, r26
 ac0:	9b 07       	cpc	r25, r27
 ac2:	71 f4       	brne	.+28     	; 0xae0 <free+0x8c>
 ac4:	8d 91       	ld	r24, X+
 ac6:	9c 91       	ld	r25, X
 ac8:	11 97       	sbiw	r26, 0x01	; 1
 aca:	84 0f       	add	r24, r20
 acc:	95 1f       	adc	r25, r21
 ace:	02 96       	adiw	r24, 0x02	; 2
 ad0:	91 83       	std	Z+1, r25	; 0x01
 ad2:	80 83       	st	Z, r24
 ad4:	12 96       	adiw	r26, 0x02	; 2
 ad6:	8d 91       	ld	r24, X+
 ad8:	9c 91       	ld	r25, X
 ada:	13 97       	sbiw	r26, 0x03	; 3
 adc:	93 83       	std	Z+3, r25	; 0x03
 ade:	82 83       	std	Z+2, r24	; 0x02
 ae0:	21 15       	cp	r18, r1
 ae2:	31 05       	cpc	r19, r1
 ae4:	29 f4       	brne	.+10     	; 0xaf0 <free+0x9c>
 ae6:	f0 93 5a 01 	sts	0x015A, r31
 aea:	e0 93 59 01 	sts	0x0159, r30
 aee:	3e c0       	rjmp	.+124    	; 0xb6c <free+0x118>
 af0:	d9 01       	movw	r26, r18
 af2:	13 96       	adiw	r26, 0x03	; 3
 af4:	fc 93       	st	X, r31
 af6:	ee 93       	st	-X, r30
 af8:	12 97       	sbiw	r26, 0x02	; 2
 afa:	4d 91       	ld	r20, X+
 afc:	5d 91       	ld	r21, X+
 afe:	a4 0f       	add	r26, r20
 b00:	b5 1f       	adc	r27, r21
 b02:	ea 17       	cp	r30, r26
 b04:	fb 07       	cpc	r31, r27
 b06:	79 f4       	brne	.+30     	; 0xb26 <free+0xd2>
 b08:	80 81       	ld	r24, Z
 b0a:	91 81       	ldd	r25, Z+1	; 0x01
 b0c:	84 0f       	add	r24, r20
 b0e:	95 1f       	adc	r25, r21
 b10:	02 96       	adiw	r24, 0x02	; 2
 b12:	d9 01       	movw	r26, r18
 b14:	11 96       	adiw	r26, 0x01	; 1
 b16:	9c 93       	st	X, r25
 b18:	8e 93       	st	-X, r24
 b1a:	82 81       	ldd	r24, Z+2	; 0x02
 b1c:	93 81       	ldd	r25, Z+3	; 0x03
 b1e:	13 96       	adiw	r26, 0x03	; 3
 b20:	9c 93       	st	X, r25
 b22:	8e 93       	st	-X, r24
 b24:	12 97       	sbiw	r26, 0x02	; 2
 b26:	e0 e0       	ldi	r30, 0x00	; 0
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	8a 81       	ldd	r24, Y+2	; 0x02
 b2c:	9b 81       	ldd	r25, Y+3	; 0x03
 b2e:	00 97       	sbiw	r24, 0x00	; 0
 b30:	19 f0       	breq	.+6      	; 0xb38 <free+0xe4>
 b32:	fe 01       	movw	r30, r28
 b34:	ec 01       	movw	r28, r24
 b36:	f9 cf       	rjmp	.-14     	; 0xb2a <free+0xd6>
 b38:	ce 01       	movw	r24, r28
 b3a:	02 96       	adiw	r24, 0x02	; 2
 b3c:	28 81       	ld	r18, Y
 b3e:	39 81       	ldd	r19, Y+1	; 0x01
 b40:	82 0f       	add	r24, r18
 b42:	93 1f       	adc	r25, r19
 b44:	20 91 57 01 	lds	r18, 0x0157
 b48:	30 91 58 01 	lds	r19, 0x0158
 b4c:	28 17       	cp	r18, r24
 b4e:	39 07       	cpc	r19, r25
 b50:	69 f4       	brne	.+26     	; 0xb6c <free+0x118>
 b52:	30 97       	sbiw	r30, 0x00	; 0
 b54:	29 f4       	brne	.+10     	; 0xb60 <free+0x10c>
 b56:	10 92 5a 01 	sts	0x015A, r1
 b5a:	10 92 59 01 	sts	0x0159, r1
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <free+0x110>
 b60:	13 82       	std	Z+3, r1	; 0x03
 b62:	12 82       	std	Z+2, r1	; 0x02
 b64:	d0 93 58 01 	sts	0x0158, r29
 b68:	c0 93 57 01 	sts	0x0157, r28
 b6c:	df 91       	pop	r29
 b6e:	cf 91       	pop	r28
 b70:	08 95       	ret

00000b72 <memset>:
 b72:	dc 01       	movw	r26, r24
 b74:	01 c0       	rjmp	.+2      	; 0xb78 <memset+0x6>
 b76:	6d 93       	st	X+, r22
 b78:	41 50       	subi	r20, 0x01	; 1
 b7a:	50 40       	sbci	r21, 0x00	; 0
 b7c:	e0 f7       	brcc	.-8      	; 0xb76 <memset+0x4>
 b7e:	08 95       	ret

00000b80 <_exit>:
 b80:	f8 94       	cli

00000b82 <__stop_program>:
 b82:	ff cf       	rjmp	.-2      	; 0xb82 <__stop_program>
