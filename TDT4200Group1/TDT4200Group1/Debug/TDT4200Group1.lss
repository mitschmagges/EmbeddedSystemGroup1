
TDT4200Group1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000012ec  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800164  00800164  000013e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cee  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b35  00000000  00000000  0000330e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ce  00000000  00000000  00003e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  00004814  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dc  00000000  00000000  00004c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e23  00000000  00000000  00005260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00006083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	ec ee       	ldi	r30, 0xEC	; 236
     260:	f2 e1       	ldi	r31, 0x12	; 18
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a4 36       	cpi	r26, 0x64	; 100
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	21 e0       	ldi	r18, 0x01	; 1
     270:	a4 e6       	ldi	r26, 0x64	; 100
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a1 38       	cpi	r26, 0x81	; 129
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 10 02 	call	0x420	; 0x420 <main>
     282:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <calibrateJoystick>:
#include "adc.h"

int null_X, null_Y;

void calibrateJoystick(){
	null_X = null_Y =0;
     28a:	10 92 76 01 	sts	0x0176, r1
     28e:	10 92 75 01 	sts	0x0175, r1
     292:	10 92 70 01 	sts	0x0170, r1
     296:	10 92 6f 01 	sts	0x016F, r1
	null_Y = ADC_read(ADC_Y_AXIS);
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
     29a:	85 e0       	ldi	r24, 0x05	; 5
     29c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	82 e5       	ldi	r24, 0x52	; 82
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <calibrateJoystick+0x18>
	_delay_us(50);
	return *ptr;
     2a6:	e0 e0       	ldi	r30, 0x00	; 0
     2a8:	f4 e1       	ldi	r31, 0x14	; 20
     2aa:	80 81       	ld	r24, Z

int null_X, null_Y;

void calibrateJoystick(){
	null_X = null_Y =0;
	null_X = ADC_read(ADC_X_AXIS);
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 70 01 	sts	0x0170, r25
     2b2:	80 93 6f 01 	sts	0x016F, r24
	null_Y = ADC_read(ADC_Y_AXIS);
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	80 83       	st	Z, r24
     2ba:	82 e5       	ldi	r24, 0x52	; 82
     2bc:	8a 95       	dec	r24
     2be:	f1 f7       	brne	.-4      	; 0x2bc <calibrateJoystick+0x32>
	_delay_us(50);
	return *ptr;
     2c0:	80 91 00 14 	lds	r24, 0x1400
int null_X, null_Y;

void calibrateJoystick(){
	null_X = null_Y =0;
	null_X = ADC_read(ADC_X_AXIS);
	null_Y = ADC_read(ADC_Y_AXIS);
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	90 93 76 01 	sts	0x0176, r25
     2ca:	80 93 75 01 	sts	0x0175, r24
     2ce:	08 95       	ret

000002d0 <joyStickPositionToPercent>:
	return position;
}

int joyStickPositionToPercent(int posit, boolean isX) {
	int nullPos;
	if(isX) {
     2d0:	67 2b       	or	r22, r23
     2d2:	29 f0       	breq	.+10     	; 0x2de <joyStickPositionToPercent+0xe>
		nullPos= null_X;
     2d4:	20 91 6f 01 	lds	r18, 0x016F
     2d8:	30 91 70 01 	lds	r19, 0x0170
     2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <joyStickPositionToPercent+0x16>
		} else {
		nullPos = null_Y;
     2de:	20 91 75 01 	lds	r18, 0x0175
     2e2:	30 91 76 01 	lds	r19, 0x0176
	}
	
	int output = ((posit - nullPos)*100)/127;
     2e6:	ac 01       	movw	r20, r24
     2e8:	42 1b       	sub	r20, r18
     2ea:	53 0b       	sbc	r21, r19
     2ec:	9a 01       	movw	r18, r20
     2ee:	44 e6       	ldi	r20, 0x64	; 100
     2f0:	42 9f       	mul	r20, r18
     2f2:	c0 01       	movw	r24, r0
     2f4:	43 9f       	mul	r20, r19
     2f6:	90 0d       	add	r25, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	6f e7       	ldi	r22, 0x7F	; 127
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 c0 04 	call	0x980	; 0x980 <__divmodhi4>
     302:	cb 01       	movw	r24, r22
     304:	6c 39       	cpi	r22, 0x9C	; 156
     306:	5f ef       	ldi	r21, 0xFF	; 255
     308:	75 07       	cpc	r23, r21
     30a:	14 f4       	brge	.+4      	; 0x310 <joyStickPositionToPercent+0x40>
     30c:	8c e9       	ldi	r24, 0x9C	; 156
     30e:	9f ef       	ldi	r25, 0xFF	; 255
     310:	85 36       	cpi	r24, 0x65	; 101
     312:	91 05       	cpc	r25, r1
     314:	14 f0       	brlt	.+4      	; 0x31a <joyStickPositionToPercent+0x4a>
     316:	84 e6       	ldi	r24, 0x64	; 100
     318:	90 e0       	ldi	r25, 0x00	; 0
		} else if(output < -100){
		return -100;
		} else {
		return output;
	}
}
     31a:	08 95       	ret

0000031c <getJoystickPosition>:
	*ptr = channelNumber;
	_delay_us(50);
	return *ptr;
}

struct Pos getJoystickPosition() {
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
	null_Y = ADC_read(ADC_Y_AXIS);
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	80 93 00 14 	sts	0x1400, r24
     32a:	82 e5       	ldi	r24, 0x52	; 82
     32c:	8a 95       	dec	r24
     32e:	f1 f7       	brne	.-4      	; 0x32c <getJoystickPosition+0x10>
	_delay_us(50);
	return *ptr;
     330:	c0 e0       	ldi	r28, 0x00	; 0
     332:	d4 e1       	ldi	r29, 0x14	; 20
     334:	88 81       	ld	r24, Y
}

struct Pos getJoystickPosition() {
	struct Pos position;
	
	position.posX = joyStickPositionToPercent(ADC_read(ADC_X_AXIS), true);
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <joyStickPositionToPercent>
     340:	8c 01       	movw	r16, r24
	null_Y = ADC_read(ADC_Y_AXIS);
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
     342:	84 e0       	ldi	r24, 0x04	; 4
     344:	88 83       	st	Y, r24
     346:	82 e5       	ldi	r24, 0x52	; 82
     348:	8a 95       	dec	r24
     34a:	f1 f7       	brne	.-4      	; 0x348 <getJoystickPosition+0x2c>
	_delay_us(50);
	return *ptr;
     34c:	80 91 00 14 	lds	r24, 0x1400

struct Pos getJoystickPosition() {
	struct Pos position;
	
	position.posX = joyStickPositionToPercent(ADC_read(ADC_X_AXIS), true);
	position.posY = joyStickPositionToPercent(ADC_read(ADC_Y_AXIS), false);
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 68 01 	call	0x2d0	; 0x2d0 <joyStickPositionToPercent>
	return position;
     35a:	a8 01       	movw	r20, r16
     35c:	bc 01       	movw	r22, r24
}
     35e:	cb 01       	movw	r24, r22
     360:	ba 01       	movw	r22, r20
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <getJoystickDirection>:
	int out = ((posit-nullPos)*100)/127;
	return out;
}

enum DIRECTION getJoystickDirection() {
	struct Pos p = getJoystickPosition();
     36c:	0e 94 8e 01 	call	0x31c	; 0x31c <getJoystickPosition>
     370:	ab 01       	movw	r20, r22
     372:	9c 01       	movw	r18, r24
	if(abs(p.posX) > abs(p.posY)) {
     374:	db 01       	movw	r26, r22
     376:	77 23       	and	r23, r23
     378:	24 f4       	brge	.+8      	; 0x382 <getJoystickDirection+0x16>
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	a6 1b       	sub	r26, r22
     380:	b7 0b       	sbc	r27, r23
     382:	fc 01       	movw	r30, r24
     384:	33 23       	and	r19, r19
     386:	24 f4       	brge	.+8      	; 0x390 <getJoystickDirection+0x24>
     388:	ee 27       	eor	r30, r30
     38a:	ff 27       	eor	r31, r31
     38c:	e8 1b       	sub	r30, r24
     38e:	f9 0b       	sbc	r31, r25
     390:	ea 17       	cp	r30, r26
     392:	fb 07       	cpc	r31, r27
     394:	44 f4       	brge	.+16     	; 0x3a6 <getJoystickDirection+0x3a>
		if( p.posX > 10){
     396:	4b 30       	cpi	r20, 0x0B	; 11
     398:	51 05       	cpc	r21, r1
     39a:	6c f4       	brge	.+26     	; 0x3b6 <getJoystickDirection+0x4a>
			return UP;
		}
		else if (p.posX < -10){
     39c:	46 3f       	cpi	r20, 0xF6	; 246
     39e:	5f 4f       	sbci	r21, 0xFF	; 255
     3a0:	64 f4       	brge	.+24     	; 0x3ba <getJoystickDirection+0x4e>
			return DOWN;
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	08 95       	ret
		else {
			return NEUTRAL;
		}
	}
	else {
		if( p.posY > 10){
     3a6:	2b 30       	cpi	r18, 0x0B	; 11
     3a8:	31 05       	cpc	r19, r1
     3aa:	4c f4       	brge	.+18     	; 0x3be <getJoystickDirection+0x52>
			return UP;
		}
		else if (p.posY < -10){
     3ac:	26 3f       	cpi	r18, 0xF6	; 246
     3ae:	3f 4f       	sbci	r19, 0xFF	; 255
     3b0:	44 f4       	brge	.+16     	; 0x3c2 <getJoystickDirection+0x56>
			return DOWN;
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	08 95       	ret

enum DIRECTION getJoystickDirection() {
	struct Pos p = getJoystickPosition();
	if(abs(p.posX) > abs(p.posY)) {
		if( p.posX > 10){
			return UP;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	08 95       	ret
		}
		else if (p.posX < -10){
			return DOWN;
		}
		else {
			return NEUTRAL;
     3ba:	84 e0       	ldi	r24, 0x04	; 4
     3bc:	08 95       	ret
		}
	}
	else {
		if( p.posY > 10){
			return UP;
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	08 95       	ret
		}
		else if (p.posY < -10){
			return DOWN;
		}
		else {
			return NEUTRAL;
     3c2:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	return NEUTRAL;
     3c4:	08 95       	ret

000003c6 <button_init>:
 
#include "buttons.h"


void button_init() {
	PORTB = 0x01<<2;
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	88 bb       	out	0x18, r24	; 24
	DDRB = 0x00;
     3ca:	17 ba       	out	0x17, r1	; 23
     3cc:	08 95       	ret

000003ce <isJoystickButtonPressed>:
}

boolean isJoystickButtonPressed() {
	short i = PINB;
     3ce:	86 b3       	in	r24, 0x16	; 22
	return !(0x1 & (i>>2));
     3d0:	86 95       	lsr	r24
     3d2:	86 95       	lsr	r24
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	89 27       	eor	r24, r25
}
     3d8:	81 70       	andi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	08 95       	ret

000003de <isLeftButtonPressed>:

boolean isLeftButtonPressed() {
	short i = PINB;
     3de:	86 b3       	in	r24, 0x16	; 22
	return (0x1 & i);
}
     3e0:	81 70       	andi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	08 95       	ret

000003e6 <XMEM_Init>:
#define set_bit(reg, bit) (reg |= (1<< bit))

#include "main.h"

void XMEM_Init() {
	MCUCR |= (1<<SRE);
     3e6:	85 b7       	in	r24, 0x35	; 53
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     3ec:	80 b7       	in	r24, 0x30	; 48
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	80 bf       	out	0x30, r24	; 48
     3f2:	08 95       	ret

000003f4 <init>:
}

void init() {
	usart_init( MYUBRR );
     3f4:	8f e1       	ldi	r24, 0x1F	; 31
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 b1 04 	call	0x962	; 0x962 <usart_init>
	XMEM_Init();
     3fc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <XMEM_Init>
	calibrateJoystick();
     400:	0e 94 45 01 	call	0x28a	; 0x28a <calibrateJoystick>
	DDRB &= ~0b0011;
     404:	87 b3       	in	r24, 0x17	; 23
     406:	8c 7f       	andi	r24, 0xFC	; 252
     408:	87 bb       	out	0x17, r24	; 23
	oled_init();
     40a:	0e 94 a4 03 	call	0x748	; 0x748 <oled_init>
	oled_reset();
     40e:	0e 94 0c 04 	call	0x818	; 0x818 <oled_reset>
	fdevopen(oled_putchar, usart_getchar);
     412:	66 eb       	ldi	r22, 0xB6	; 182
     414:	74 e0       	ldi	r23, 0x04	; 4
     416:	88 e4       	ldi	r24, 0x48	; 72
     418:	94 e0       	ldi	r25, 0x04	; 4
     41a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <fdevopen>
     41e:	08 95       	ret

00000420 <main>:
}

int main(void) {
	init();
     420:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <init>
	oled_reset();
     424:	0e 94 0c 04 	call	0x818	; 0x818 <oled_reset>
	button_init();
     428:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <button_init>

	while(1) {
		
		test_oled();
     42c:	0e 94 ae 04 	call	0x95c	; 0x95c <test_oled>
     430:	fd cf       	rjmp	.-6      	; 0x42c <main+0xc>

00000432 <fonts_getStrip>:
 */ 

#include "fonts.h"

unsigned char fonts_getStrip(char character, char stripNo){
	character -= ' ';
     432:	80 52       	subi	r24, 0x20	; 32
	unsigned char temp = (pgm_read_word(&font5[character][stripNo]));
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	fc 01       	movw	r30, r24
     438:	ee 0f       	add	r30, r30
     43a:	ff 1f       	adc	r31, r31
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	e8 0f       	add	r30, r24
     442:	f9 1f       	adc	r31, r25
     444:	e6 0f       	add	r30, r22
     446:	f1 1d       	adc	r31, r1
     448:	e0 59       	subi	r30, 0x90	; 144
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	85 91       	lpm	r24, Z+
     44e:	94 91       	lpm	r25, Z
	return temp;
     450:	08 95       	ret

00000452 <menu_getNewPointerPosition>:
	
	
	}
	}

int menu_getNewPointerPosition(int position, int menuLength){
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	ec 01       	movw	r28, r24
     45c:	8b 01       	movw	r16, r22
	static enum DIRECTION last = NEUTRAL;
	
	
	
	enum DIRECTION direction = getJoystickDirection();
     45e:	0e 94 b6 01 	call	0x36c	; 0x36c <getJoystickDirection>

	switch (direction){
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	19 f0       	breq	.+6      	; 0x46c <menu_getNewPointerPosition+0x1a>
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	69 f0       	breq	.+26     	; 0x484 <menu_getNewPointerPosition+0x32>
     46a:	19 c0       	rjmp	.+50     	; 0x49e <menu_getNewPointerPosition+0x4c>
		case UP:
		if( last == NEUTRAL){
     46c:	90 91 06 01 	lds	r25, 0x0106
     470:	94 30       	cpi	r25, 0x04	; 4
     472:	a9 f4       	brne	.+42     	; 0x49e <menu_getNewPointerPosition+0x4c>
			if( position> 0){
     474:	1c 16       	cp	r1, r28
     476:	1d 06       	cpc	r1, r29
     478:	14 f4       	brge	.+4      	; 0x47e <menu_getNewPointerPosition+0x2c>
				--position;
     47a:	21 97       	sbiw	r28, 0x01	; 1
     47c:	10 c0       	rjmp	.+32     	; 0x49e <menu_getNewPointerPosition+0x4c>
			}
			else position = menuLength-1;
     47e:	e8 01       	movw	r28, r16
     480:	21 97       	sbiw	r28, 0x01	; 1
     482:	0d c0       	rjmp	.+26     	; 0x49e <menu_getNewPointerPosition+0x4c>
		}
		break;
		case DOWN:
		if( last == NEUTRAL){
     484:	90 91 06 01 	lds	r25, 0x0106
     488:	94 30       	cpi	r25, 0x04	; 4
     48a:	49 f4       	brne	.+18     	; 0x49e <menu_getNewPointerPosition+0x4c>
			if ( position < menuLength-1){
     48c:	01 50       	subi	r16, 0x01	; 1
     48e:	11 09       	sbc	r17, r1
     490:	c0 17       	cp	r28, r16
     492:	d1 07       	cpc	r29, r17
     494:	14 f4       	brge	.+4      	; 0x49a <menu_getNewPointerPosition+0x48>
				++ position;
     496:	21 96       	adiw	r28, 0x01	; 1
     498:	02 c0       	rjmp	.+4      	; 0x49e <menu_getNewPointerPosition+0x4c>
			}
			else{
				position =0;
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d0 e0       	ldi	r29, 0x00	; 0
		case RIGHT:
		break;
		case NEUTRAL:
		break;
	}
	last = direction;
     49e:	80 93 06 01 	sts	0x0106, r24
	return position;
}
     4a2:	ce 01       	movw	r24, r28
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret

000004ae <menu_printMenu>:
void menu_printMenu(char** options, int menuLength, int pointer){
     4ae:	8f 92       	push	r8
     4b0:	9f 92       	push	r9
     4b2:	af 92       	push	r10
     4b4:	bf 92       	push	r11
     4b6:	cf 92       	push	r12
     4b8:	df 92       	push	r13
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	6b 01       	movw	r12, r22
     4c8:	5a 01       	movw	r10, r20
	
		for(int i = 0; i < menuLength; ++i){
     4ca:	16 16       	cp	r1, r22
     4cc:	17 06       	cpc	r1, r23
     4ce:	0c f0       	brlt	.+2      	; 0x4d2 <menu_printMenu+0x24>
     4d0:	40 c0       	rjmp	.+128    	; 0x552 <__stack+0x53>
			if(i== pointer){
				oled_set_printmode(INVERSE);
				printf("    ");
				
				printf(options[i]);
     4d2:	4a 01       	movw	r8, r20
     4d4:	88 0c       	add	r8, r8
     4d6:	99 1c       	adc	r9, r9
     4d8:	88 0e       	add	r8, r24
     4da:	99 1e       	adc	r9, r25
     4dc:	8c 01       	movw	r16, r24
	last = direction;
	return position;
}
void menu_printMenu(char** options, int menuLength, int pointer){
	
		for(int i = 0; i < menuLength; ++i){
     4de:	c0 e0       	ldi	r28, 0x00	; 0
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
				
				printf(options[i]);
				oled_set_printmode(NORMAL);
			}
			else{
				printf("    ");
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f8 e4       	ldi	r31, 0x48	; 72
     4e6:	ef 2e       	mov	r14, r31
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	ff 2e       	mov	r15, r31
     4ec:	f0 2d       	mov	r31, r0
	return position;
}
void menu_printMenu(char** options, int menuLength, int pointer){
	
		for(int i = 0; i < menuLength; ++i){
			if(i== pointer){
     4ee:	ca 15       	cp	r28, r10
     4f0:	db 05       	cpc	r29, r11
     4f2:	b1 f4       	brne	.+44     	; 0x520 <__stack+0x21>
				oled_set_printmode(INVERSE);
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 ab 04 	call	0x956	; 0x956 <oled_set_printmode>
				printf("    ");
     4fa:	ff 92       	push	r15
     4fc:	ef 92       	push	r14
     4fe:	0e 94 33 05 	call	0xa66	; 0xa66 <printf>
				
				printf(options[i]);
     502:	f4 01       	movw	r30, r8
     504:	81 81       	ldd	r24, Z+1	; 0x01
     506:	8f 93       	push	r24
     508:	80 81       	ld	r24, Z
     50a:	8f 93       	push	r24
     50c:	0e 94 33 05 	call	0xa66	; 0xa66 <printf>
				oled_set_printmode(NORMAL);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 ab 04 	call	0x956	; 0x956 <oled_set_printmode>
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f c0       	rjmp	.+30     	; 0x53e <__stack+0x3f>
			}
			else{
				printf("    ");
     520:	ff 92       	push	r15
     522:	ef 92       	push	r14
     524:	0e 94 33 05 	call	0xa66	; 0xa66 <printf>
				printf(options[i]);
     528:	f8 01       	movw	r30, r16
     52a:	81 81       	ldd	r24, Z+1	; 0x01
     52c:	8f 93       	push	r24
     52e:	80 81       	ld	r24, Z
     530:	8f 93       	push	r24
     532:	0e 94 33 05 	call	0xa66	; 0xa66 <printf>
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
			}
			printf("\n");
     53e:	8a e0       	ldi	r24, 0x0A	; 10
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 47 05 	call	0xa8e	; 0xa8e <putchar>
	last = direction;
	return position;
}
void menu_printMenu(char** options, int menuLength, int pointer){
	
		for(int i = 0; i < menuLength; ++i){
     546:	21 96       	adiw	r28, 0x01	; 1
     548:	0e 5f       	subi	r16, 0xFE	; 254
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
     54c:	cc 15       	cp	r28, r12
     54e:	dd 05       	cpc	r29, r13
     550:	71 f6       	brne	.-100    	; 0x4ee <menu_printMenu+0x40>
				printf("    ");
				printf(options[i]);
			}
			printf("\n");
		}
}
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <menu_play>:
 */ 

#include "menu.h"


void menu_play(){
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	00 d0       	rcall	.+0      	; 0x57a <menu_play+0xe>
     57a:	00 d0       	rcall	.+0      	; 0x57c <menu_play+0x10>
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	oled_reset();
     580:	0e 94 0c 04 	call	0x818	; 0x818 <oled_reset>
	while(! isLeftButtonPressed()){
	oled_goto_pos(0,0);
	const int menuLength = 2;
	char* options[2] = {"en", "mer"};
     584:	0f 2e       	mov	r0, r31
     586:	f3 e1       	ldi	r31, 0x13	; 19
     588:	ef 2e       	mov	r14, r31
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	ff 2e       	mov	r15, r31
     58e:	f0 2d       	mov	r31, r0
     590:	06 e1       	ldi	r16, 0x16	; 22
     592:	11 e0       	ldi	r17, 0x01	; 1
#include "menu.h"


void menu_play(){
	oled_reset();
	while(! isLeftButtonPressed()){
     594:	22 c0       	rjmp	.+68     	; 0x5da <menu_play+0x6e>
	oled_goto_pos(0,0);
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 16 04 	call	0x82c	; 0x82c <oled_goto_pos>
	const int menuLength = 2;
	char* options[2] = {"en", "mer"};
     59e:	fa 82       	std	Y+2, r15	; 0x02
     5a0:	e9 82       	std	Y+1, r14	; 0x01
     5a2:	1c 83       	std	Y+4, r17	; 0x04
     5a4:	0b 83       	std	Y+3, r16	; 0x03
	static int pointer=0;
	printf("Play\n");
     5a6:	8a e1       	ldi	r24, 0x1A	; 26
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 4e 05 	call	0xa9c	; 0xa9c <puts>
	menu_printMenu(options, menuLength,pointer);
     5ae:	40 91 68 01 	lds	r20, 0x0168
     5b2:	50 91 69 01 	lds	r21, 0x0169
     5b6:	62 e0       	ldi	r22, 0x02	; 2
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	0e 94 57 02 	call	0x4ae	; 0x4ae <menu_printMenu>
	pointer = menu_getNewPointerPosition(pointer, menuLength);
     5c2:	62 e0       	ldi	r22, 0x02	; 2
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 91 68 01 	lds	r24, 0x0168
     5ca:	90 91 69 01 	lds	r25, 0x0169
     5ce:	0e 94 29 02 	call	0x452	; 0x452 <menu_getNewPointerPosition>
     5d2:	90 93 69 01 	sts	0x0169, r25
     5d6:	80 93 68 01 	sts	0x0168, r24
#include "menu.h"


void menu_play(){
	oled_reset();
	while(! isLeftButtonPressed()){
     5da:	0e 94 ef 01 	call	0x3de	; 0x3de <isLeftButtonPressed>
     5de:	89 2b       	or	r24, r25
     5e0:	d1 f2       	breq	.-76     	; 0x596 <menu_play+0x2a>
	static int pointer=0;
	printf("Play\n");
	menu_printMenu(options, menuLength,pointer);
	pointer = menu_getNewPointerPosition(pointer, menuLength);
}
	}
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <menu_options>:

void menu_options(){
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <menu_options+0xe>
     606:	00 d0       	rcall	.+0      	; 0x608 <menu_options+0x10>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
	oled_reset();
     60c:	0e 94 0c 04 	call	0x818	; 0x818 <oled_reset>
	while(! isLeftButtonPressed()){
	oled_goto_pos(0,0);
	const int menuLength = 2;
	char* options[2] = {"tull", "noe"};
     610:	0f 2e       	mov	r0, r31
     612:	ff e1       	ldi	r31, 0x1F	; 31
     614:	ef 2e       	mov	r14, r31
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	ff 2e       	mov	r15, r31
     61a:	f0 2d       	mov	r31, r0
     61c:	04 e2       	ldi	r16, 0x24	; 36
     61e:	11 e0       	ldi	r17, 0x01	; 1
}
	}

void menu_options(){
	oled_reset();
	while(! isLeftButtonPressed()){
     620:	22 c0       	rjmp	.+68     	; 0x666 <menu_options+0x6e>
	oled_goto_pos(0,0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 16 04 	call	0x82c	; 0x82c <oled_goto_pos>
	const int menuLength = 2;
	char* options[2] = {"tull", "noe"};
     62a:	fa 82       	std	Y+2, r15	; 0x02
     62c:	e9 82       	std	Y+1, r14	; 0x01
     62e:	1c 83       	std	Y+4, r17	; 0x04
     630:	0b 83       	std	Y+3, r16	; 0x03
	static int pointer=0;
	printf("Options\n");
     632:	88 e2       	ldi	r24, 0x28	; 40
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 4e 05 	call	0xa9c	; 0xa9c <puts>
	menu_printMenu(options, menuLength,pointer);
     63a:	40 91 66 01 	lds	r20, 0x0166
     63e:	50 91 67 01 	lds	r21, 0x0167
     642:	62 e0       	ldi	r22, 0x02	; 2
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 57 02 	call	0x4ae	; 0x4ae <menu_printMenu>
	pointer = menu_getNewPointerPosition(pointer, menuLength);
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	80 91 66 01 	lds	r24, 0x0166
     656:	90 91 67 01 	lds	r25, 0x0167
     65a:	0e 94 29 02 	call	0x452	; 0x452 <menu_getNewPointerPosition>
     65e:	90 93 67 01 	sts	0x0167, r25
     662:	80 93 66 01 	sts	0x0166, r24
}
	}

void menu_options(){
	oled_reset();
	while(! isLeftButtonPressed()){
     666:	0e 94 ef 01 	call	0x3de	; 0x3de <isLeftButtonPressed>
     66a:	89 2b       	or	r24, r25
     66c:	d1 f2       	breq	.-76     	; 0x622 <menu_options+0x2a>
	static int pointer=0;
	printf("Options\n");
	menu_printMenu(options, menuLength,pointer);
	pointer = menu_getNewPointerPosition(pointer, menuLength);
	}
	}
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	08 95       	ret

00000684 <menu_mainMenu>:

void menu_mainMenu(){
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	2c 97       	sbiw	r28, 0x0c	; 12
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
	//PRINT THE MENU
	oled_reset();
     69a:	0e 94 0c 04 	call	0x818	; 0x818 <oled_reset>
	while(! isLeftButtonPressed()){
	oled_goto_pos(0,0);
	printf("         MAIN MENU          \n");
	void (*arr[3])(void)= { &menu_play, &menu_options, &menu_options};
     69e:	16 e0       	ldi	r17, 0x06	; 6
	}

void menu_mainMenu(){
	//PRINT THE MENU
	oled_reset();
	while(! isLeftButtonPressed()){
     6a0:	44 c0       	rjmp	.+136    	; 0x72a <menu_mainMenu+0xa6>
	oled_goto_pos(0,0);
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 16 04 	call	0x82c	; 0x82c <oled_goto_pos>
	printf("         MAIN MENU          \n");
     6aa:	80 e3       	ldi	r24, 0x30	; 48
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 4e 05 	call	0xa9c	; 0xa9c <puts>
	void (*arr[3])(void)= { &menu_play, &menu_options, &menu_options};
     6b2:	e7 e0       	ldi	r30, 0x07	; 7
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	de 01       	movw	r26, r28
     6b8:	17 96       	adiw	r26, 0x07	; 7
     6ba:	81 2f       	mov	r24, r17
     6bc:	01 90       	ld	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	8a 95       	dec	r24
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <menu_mainMenu+0x38>
	const int menuLength = 3;
	char* options[3] = {"ONE   ", "TWO   ", "THREE   "};
     6c4:	ed e0       	ldi	r30, 0x0D	; 13
     6c6:	f1 e0       	ldi	r31, 0x01	; 1
     6c8:	de 01       	movw	r26, r28
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	81 2f       	mov	r24, r17
     6ce:	01 90       	ld	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	8a 95       	dec	r24
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <menu_mainMenu+0x4a>
	static int pointer = 0;
	
	menu_printMenu(options, menuLength, pointer);
     6d6:	40 91 64 01 	lds	r20, 0x0164
     6da:	50 91 65 01 	lds	r21, 0x0165
     6de:	63 e0       	ldi	r22, 0x03	; 3
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	ce 01       	movw	r24, r28
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	0e 94 57 02 	call	0x4ae	; 0x4ae <menu_printMenu>
	
	pointer = menu_getNewPointerPosition(pointer, menuLength);
     6ea:	63 e0       	ldi	r22, 0x03	; 3
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	80 91 64 01 	lds	r24, 0x0164
     6f2:	90 91 65 01 	lds	r25, 0x0165
     6f6:	0e 94 29 02 	call	0x452	; 0x452 <menu_getNewPointerPosition>
     6fa:	90 93 65 01 	sts	0x0165, r25
     6fe:	80 93 64 01 	sts	0x0164, r24
	
	if (isJoystickButtonPressed()){
     702:	0e 94 e7 01 	call	0x3ce	; 0x3ce <isJoystickButtonPressed>
     706:	89 2b       	or	r24, r25
     708:	81 f0       	breq	.+32     	; 0x72a <menu_mainMenu+0xa6>
		arr[pointer]();
     70a:	e0 91 64 01 	lds	r30, 0x0164
     70e:	f0 91 65 01 	lds	r31, 0x0165
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	8c 0f       	add	r24, r28
     71c:	9d 1f       	adc	r25, r29
     71e:	e8 0f       	add	r30, r24
     720:	f9 1f       	adc	r31, r25
     722:	06 80       	ldd	r0, Z+6	; 0x06
     724:	f7 81       	ldd	r31, Z+7	; 0x07
     726:	e0 2d       	mov	r30, r0
     728:	09 95       	icall
	}

void menu_mainMenu(){
	//PRINT THE MENU
	oled_reset();
	while(! isLeftButtonPressed()){
     72a:	0e 94 ef 01 	call	0x3de	; 0x3de <isLeftButtonPressed>
     72e:	89 2b       	or	r24, r25
     730:	09 f4       	brne	.+2      	; 0x734 <menu_mainMenu+0xb0>
     732:	b7 cf       	rjmp	.-146    	; 0x6a2 <menu_mainMenu+0x1e>
	}
	
	
	
	}
	}
     734:	2c 96       	adiw	r28, 0x0c	; 12
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	08 95       	ret

00000748 <oled_init>:
	oled_write_c(0xaf);  //display on
}

void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
     748:	e0 e0       	ldi	r30, 0x00	; 0
     74a:	f0 e1       	ldi	r31, 0x10	; 16
     74c:	8e ea       	ldi	r24, 0xAE	; 174
     74e:	80 83       	st	Z, r24
     750:	81 ea       	ldi	r24, 0xA1	; 161
     752:	80 83       	st	Z, r24
     754:	8a ed       	ldi	r24, 0xDA	; 218
     756:	80 83       	st	Z, r24
     758:	82 e1       	ldi	r24, 0x12	; 18
     75a:	80 83       	st	Z, r24
     75c:	88 ec       	ldi	r24, 0xC8	; 200
     75e:	80 83       	st	Z, r24
     760:	88 ea       	ldi	r24, 0xA8	; 168
     762:	80 83       	st	Z, r24
     764:	8f e3       	ldi	r24, 0x3F	; 63
     766:	80 83       	st	Z, r24
     768:	85 ed       	ldi	r24, 0xD5	; 213
     76a:	80 83       	st	Z, r24
     76c:	80 e8       	ldi	r24, 0x80	; 128
     76e:	80 83       	st	Z, r24
     770:	81 e8       	ldi	r24, 0x81	; 129
     772:	80 83       	st	Z, r24
     774:	80 e5       	ldi	r24, 0x50	; 80
     776:	80 83       	st	Z, r24
     778:	89 ed       	ldi	r24, 0xD9	; 217
     77a:	80 83       	st	Z, r24
     77c:	81 e2       	ldi	r24, 0x21	; 33
     77e:	80 83       	st	Z, r24
     780:	80 e2       	ldi	r24, 0x20	; 32
     782:	80 83       	st	Z, r24
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	80 83       	st	Z, r24
     788:	8b ed       	ldi	r24, 0xDB	; 219
     78a:	80 83       	st	Z, r24
     78c:	80 e3       	ldi	r24, 0x30	; 48
     78e:	80 83       	st	Z, r24
     790:	8d ea       	ldi	r24, 0xAD	; 173
     792:	80 83       	st	Z, r24
     794:	10 82       	st	Z, r1
     796:	84 ea       	ldi	r24, 0xA4	; 164
     798:	80 83       	st	Z, r24
     79a:	86 ea       	ldi	r24, 0xA6	; 166
     79c:	80 83       	st	Z, r24
     79e:	8f ea       	ldi	r24, 0xAF	; 175
     7a0:	80 83       	st	Z, r24
     7a2:	08 95       	ret

000007a4 <oled_goto_line>:
		oled_clear_line(i);
	}
}

void oled_goto_line(char line) {
	if(line < 8) {
     7a4:	88 30       	cpi	r24, 0x08	; 8
     7a6:	90 f4       	brcc	.+36     	; 0x7cc <oled_goto_line+0x28>
		oled_write_c(0xB0 + line);
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9c 01       	movw	r18, r24
     7ac:	20 55       	subi	r18, 0x50	; 80
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
	oled_write_c(0xaf);  //display on
}

void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
     7b0:	e0 e0       	ldi	r30, 0x00	; 0
     7b2:	f0 e1       	ldi	r31, 0x10	; 16
     7b4:	20 83       	st	Z, r18
     7b6:	10 82       	st	Z, r1
     7b8:	20 e1       	ldi	r18, 0x10	; 16
     7ba:	20 83       	st	Z, r18
void oled_goto_line(char line) {
	if(line < 8) {
		oled_write_c(0xB0 + line);
		oled_write_c(0x00); //set lower column
		oled_write_c(0x10);
		CURRENT_LINE = line;
     7bc:	90 93 6e 01 	sts	0x016E, r25
     7c0:	80 93 6d 01 	sts	0x016D, r24
		CURRENT_COL = 0;
     7c4:	10 92 6c 01 	sts	0x016C, r1
     7c8:	10 92 6b 01 	sts	0x016B, r1
     7cc:	08 95       	ret

000007ce <oled_goto_column>:
	oled_write_c(0x10);
	CURRENT_COL = 0;
}

void oled_goto_column(int column) {
	if(column < 128) {
     7ce:	80 38       	cpi	r24, 0x80	; 128
     7d0:	91 05       	cpc	r25, r1
     7d2:	ac f4       	brge	.+42     	; 0x7fe <oled_goto_column+0x30>
		char lowerBitsOfColumn = column & 0x0F;
     7d4:	28 2f       	mov	r18, r24
     7d6:	2f 70       	andi	r18, 0x0F	; 15
	oled_write_c(0xaf);  //display on
}

void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
     7d8:	e0 e0       	ldi	r30, 0x00	; 0
     7da:	f0 e1       	ldi	r31, 0x10	; 16
     7dc:	20 83       	st	Z, r18

void oled_goto_column(int column) {
	if(column < 128) {
		char lowerBitsOfColumn = column & 0x0F;
		oled_write_c(0x00 | lowerBitsOfColumn);
		char higherBitsOfColumn = (column>>4) & 0x0F;
     7de:	9c 01       	movw	r18, r24
     7e0:	35 95       	asr	r19
     7e2:	27 95       	ror	r18
     7e4:	35 95       	asr	r19
     7e6:	27 95       	ror	r18
     7e8:	35 95       	asr	r19
     7ea:	27 95       	ror	r18
     7ec:	35 95       	asr	r19
     7ee:	27 95       	ror	r18
     7f0:	2f 70       	andi	r18, 0x0F	; 15
		oled_write_c(0x10 | higherBitsOfColumn);
     7f2:	20 61       	ori	r18, 0x10	; 16
	oled_write_c(0xaf);  //display on
}

void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
     7f4:	20 83       	st	Z, r18
	if(column < 128) {
		char lowerBitsOfColumn = column & 0x0F;
		oled_write_c(0x00 | lowerBitsOfColumn);
		char higherBitsOfColumn = (column>>4) & 0x0F;
		oled_write_c(0x10 | higherBitsOfColumn);
		CURRENT_COL = column;
     7f6:	90 93 6c 01 	sts	0x016C, r25
     7fa:	80 93 6b 01 	sts	0x016B, r24
     7fe:	08 95       	ret

00000800 <oled_clear_line>:
	}
}

void oled_clear_line(char line) {
	oled_goto_line(line);
     800:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <oled_goto_line>
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	90 e0       	ldi	r25, 0x00	; 0
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
     808:	e0 e0       	ldi	r30, 0x00	; 0
     80a:	f2 e1       	ldi	r31, 0x12	; 18
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	20 83       	st	Z, r18
     810:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_line(char line) {
	oled_goto_line(line);
	for(int i = 0; i < 128; i++) {
     812:	00 97       	sbiw	r24, 0x00	; 0
     814:	e1 f7       	brne	.-8      	; 0x80e <oled_clear_line+0xe>
		oled_print_strip(0x01);
	}
}
     816:	08 95       	ret

00000818 <oled_reset>:
void oled_write_c(int input) {
	volatile char* ptr = OLED_C;
	*ptr = (input);
}

void oled_reset() {
     818:	cf 93       	push	r28
     81a:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i = 0; i < 8; i++) {
		oled_clear_line(i);
     81c:	8c 2f       	mov	r24, r28
     81e:	0e 94 00 04 	call	0x800	; 0x800 <oled_clear_line>
     822:	cf 5f       	subi	r28, 0xFF	; 255
	volatile char* ptr = OLED_C;
	*ptr = (input);
}

void oled_reset() {
	for(int i = 0; i < 8; i++) {
     824:	c8 30       	cpi	r28, 0x08	; 8
     826:	d1 f7       	brne	.-12     	; 0x81c <oled_reset+0x4>
		oled_clear_line(i);
	}
}
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <oled_goto_pos>:
	for(int i = 0; i < 128; i++) {
		oled_print_strip(0x01);
	}
}

void oled_goto_pos(char line, char column) {
     82c:	cf 93       	push	r28
     82e:	c6 2f       	mov	r28, r22
	oled_goto_line(line);
     830:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <oled_goto_line>
	oled_goto_column(column);
     834:	8c 2f       	mov	r24, r28
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 e7 03 	call	0x7ce	; 0x7ce <oled_goto_column>
}
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <oled_printchar>:
void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
}

void oled_printchar(char input) {
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
	char temp;
	char mask = 0x00;

	if (printmode == INVERSE){
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	20 91 6a 01 	lds	r18, 0x016A
     854:	21 30       	cpi	r18, 0x01	; 1
     856:	09 f0       	breq	.+2      	; 0x85a <oled_printchar+0x1a>
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	d9 2e       	mov	r13, r25
     85c:	d1 94       	neg	r13
		mask = 0xFF;
	}
	for(int i =0; i<5 ; ++i){
     85e:	c0 e0       	ldi	r28, 0x00	; 0
     860:	d0 e0       	ldi	r29, 0x00	; 0
		temp = fonts_getStrip(input, i);
     862:	e8 2e       	mov	r14, r24
     864:	f1 2c       	mov	r15, r1
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
     866:	00 e0       	ldi	r16, 0x00	; 0
     868:	12 e1       	ldi	r17, 0x12	; 18

	if (printmode == INVERSE){
		mask = 0xFF;
	}
	for(int i =0; i<5 ; ++i){
		temp = fonts_getStrip(input, i);
     86a:	be 01       	movw	r22, r28
     86c:	c7 01       	movw	r24, r14
     86e:	0e 94 19 02 	call	0x432	; 0x432 <fonts_getStrip>
		oled_print_strip(temp^mask);
     872:	8d 25       	eor	r24, r13
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
     874:	f8 01       	movw	r30, r16
     876:	80 83       	st	Z, r24
	char mask = 0x00;

	if (printmode == INVERSE){
		mask = 0xFF;
	}
	for(int i =0; i<5 ; ++i){
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	c5 30       	cpi	r28, 0x05	; 5
     87c:	d1 05       	cpc	r29, r1
     87e:	a9 f7       	brne	.-22     	; 0x86a <oled_printchar+0x2a>
		temp = fonts_getStrip(input, i);
		oled_print_strip(temp^mask);
	}
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	08 95       	ret

00000890 <oled_putchar>:

int oled_putchar(unsigned char input) {
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	18 2f       	mov	r17, r24
	if(input =='\n' || CURRENT_COL/5 >=25){
     898:	8a 30       	cpi	r24, 0x0A	; 10
     89a:	41 f0       	breq	.+16     	; 0x8ac <oled_putchar+0x1c>
     89c:	20 91 6b 01 	lds	r18, 0x016B
     8a0:	30 91 6c 01 	lds	r19, 0x016C
     8a4:	2d 37       	cpi	r18, 0x7D	; 125
     8a6:	31 05       	cpc	r19, r1
     8a8:	0c f4       	brge	.+2      	; 0x8ac <oled_putchar+0x1c>
     8aa:	4e c0       	rjmp	.+156    	; 0x948 <oled_putchar+0xb8>
		CURRENT_LINE = ++CURRENT_LINE%8;
     8ac:	20 91 6d 01 	lds	r18, 0x016D
     8b0:	30 91 6e 01 	lds	r19, 0x016E
     8b4:	2f 5f       	subi	r18, 0xFF	; 255
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	27 70       	andi	r18, 0x07	; 7
     8ba:	30 78       	andi	r19, 0x80	; 128
     8bc:	33 23       	and	r19, r19
     8be:	34 f4       	brge	.+12     	; 0x8cc <oled_putchar+0x3c>
     8c0:	21 50       	subi	r18, 0x01	; 1
     8c2:	31 09       	sbc	r19, r1
     8c4:	28 6f       	ori	r18, 0xF8	; 248
     8c6:	3f 6f       	ori	r19, 0xFF	; 255
     8c8:	2f 5f       	subi	r18, 0xFF	; 255
     8ca:	3f 4f       	sbci	r19, 0xFF	; 255
     8cc:	30 93 6e 01 	sts	0x016E, r19
     8d0:	20 93 6d 01 	sts	0x016D, r18
		for (int i = CURRENT_COL; i < 128; ++i){
     8d4:	20 91 6b 01 	lds	r18, 0x016B
     8d8:	30 91 6c 01 	lds	r19, 0x016C
     8dc:	20 38       	cpi	r18, 0x80	; 128
     8de:	31 05       	cpc	r19, r1
     8e0:	44 f4       	brge	.+16     	; 0x8f2 <oled_putchar+0x62>
	oled_print_strip(temp);
}

void oled_print_strip(char input) {
	volatile char* ptr = OLED_D;
	*ptr = input;
     8e2:	e0 e0       	ldi	r30, 0x00	; 0
     8e4:	f2 e1       	ldi	r31, 0x12	; 18
     8e6:	10 82       	st	Z, r1
}

int oled_putchar(unsigned char input) {
	if(input =='\n' || CURRENT_COL/5 >=25){
		CURRENT_LINE = ++CURRENT_LINE%8;
		for (int i = CURRENT_COL; i < 128; ++i){
     8e8:	2f 5f       	subi	r18, 0xFF	; 255
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	20 38       	cpi	r18, 0x80	; 128
     8ee:	31 05       	cpc	r19, r1
     8f0:	d1 f7       	brne	.-12     	; 0x8e6 <oled_putchar+0x56>
			oled_print_strip(0x00);
		}
		oled_goto_line(CURRENT_LINE);
     8f2:	cd e6       	ldi	r28, 0x6D	; 109
     8f4:	d1 e0       	ldi	r29, 0x01	; 1
     8f6:	88 81       	ld	r24, Y
     8f8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <oled_goto_line>
		usart_putchar('a');
     8fc:	81 e6       	ldi	r24, 0x61	; 97
     8fe:	0e 94 bb 04 	call	0x976	; 0x976 <usart_putchar>
		usart_putchar('0' + CURRENT_LINE);
     902:	88 81       	ld	r24, Y
     904:	80 5d       	subi	r24, 0xD0	; 208
     906:	0e 94 bb 04 	call	0x976	; 0x976 <usart_putchar>
		usart_putchar('\n');
     90a:	8a e0       	ldi	r24, 0x0A	; 10
     90c:	0e 94 bb 04 	call	0x976	; 0x976 <usart_putchar>
		CURRENT_COL=0;
     910:	10 92 6c 01 	sts	0x016C, r1
     914:	10 92 6b 01 	sts	0x016B, r1
	}
	usart_putchar(input);
     918:	81 2f       	mov	r24, r17
     91a:	0e 94 bb 04 	call	0x976	; 0x976 <usart_putchar>
	if(input =='\n') return input;
     91e:	1a 30       	cpi	r17, 0x0A	; 10
     920:	81 f0       	breq	.+32     	; 0x942 <oled_putchar+0xb2>
	oled_printchar(input);
     922:	81 2f       	mov	r24, r17
     924:	0e 94 20 04 	call	0x840	; 0x840 <oled_printchar>

	CURRENT_COL+=5;
     928:	20 91 6b 01 	lds	r18, 0x016B
     92c:	30 91 6c 01 	lds	r19, 0x016C
     930:	2b 5f       	subi	r18, 0xFB	; 251
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	30 93 6c 01 	sts	0x016C, r19
     938:	20 93 6b 01 	sts	0x016B, r18
	return input;
     93c:	81 2f       	mov	r24, r17
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	06 c0       	rjmp	.+12     	; 0x94e <oled_putchar+0xbe>
		usart_putchar('0' + CURRENT_LINE);
		usart_putchar('\n');
		CURRENT_COL=0;
	}
	usart_putchar(input);
	if(input =='\n') return input;
     942:	8a e0       	ldi	r24, 0x0A	; 10
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	03 c0       	rjmp	.+6      	; 0x94e <oled_putchar+0xbe>
		usart_putchar('a');
		usart_putchar('0' + CURRENT_LINE);
		usart_putchar('\n');
		CURRENT_COL=0;
	}
	usart_putchar(input);
     948:	0e 94 bb 04 	call	0x976	; 0x976 <usart_putchar>
     94c:	ea cf       	rjmp	.-44     	; 0x922 <oled_putchar+0x92>
	if(input =='\n') return input;
	oled_printchar(input);

	CURRENT_COL+=5;
	return input;
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	08 95       	ret

00000956 <oled_set_printmode>:

void oled_set_printmode(enum PRINTMODE mode) {
	printmode = mode;
     956:	80 93 6a 01 	sts	0x016A, r24
     95a:	08 95       	ret

0000095c <test_oled>:
}

void test_oled() {
	menu_mainMenu();
     95c:	0e 94 42 03 	call	0x684	; 0x684 <menu_mainMenu>
     960:	08 95       	ret

00000962 <usart_init>:

#include "usart.h"

void usart_init( unsigned int ubrr ) {
	// set the baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     962:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
     964:	89 b9       	out	0x09, r24	; 9
	// enable reciever and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     966:	88 e1       	ldi	r24, 0x18	; 24
     968:	8a b9       	out	0x0a, r24	; 10
     96a:	08 95       	ret

0000096c <usart_getchar>:
	//fdevopen(USART_putchar, USART_getchar);
}

int usart_getchar() {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     96c:	5f 9b       	sbis	0x0b, 7	; 11
     96e:	fe cf       	rjmp	.-4      	; 0x96c <usart_getchar>
	/* Get and return received data from buffer */
	return UDR0;
     970:	8c b1       	in	r24, 0x0c	; 12
}
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	08 95       	ret

00000976 <usart_putchar>:

int usart_putchar(unsigned char data) {
	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
     976:	5d 9b       	sbis	0x0b, 5	; 11
     978:	fe cf       	rjmp	.-4      	; 0x976 <usart_putchar>
	// put data into buffer, sends the data
	UDR0 = data;
     97a:	8c b9       	out	0x0c, r24	; 12
	return data;
}
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	08 95       	ret

00000980 <__divmodhi4>:
     980:	97 fb       	bst	r25, 7
     982:	07 2e       	mov	r0, r23
     984:	16 f4       	brtc	.+4      	; 0x98a <__divmodhi4+0xa>
     986:	00 94       	com	r0
     988:	07 d0       	rcall	.+14     	; 0x998 <__divmodhi4_neg1>
     98a:	77 fd       	sbrc	r23, 7
     98c:	09 d0       	rcall	.+18     	; 0x9a0 <__divmodhi4_neg2>
     98e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__udivmodhi4>
     992:	07 fc       	sbrc	r0, 7
     994:	05 d0       	rcall	.+10     	; 0x9a0 <__divmodhi4_neg2>
     996:	3e f4       	brtc	.+14     	; 0x9a6 <__divmodhi4_exit>

00000998 <__divmodhi4_neg1>:
     998:	90 95       	com	r25
     99a:	81 95       	neg	r24
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	08 95       	ret

000009a0 <__divmodhi4_neg2>:
     9a0:	70 95       	com	r23
     9a2:	61 95       	neg	r22
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255

000009a6 <__divmodhi4_exit>:
     9a6:	08 95       	ret

000009a8 <__udivmodhi4>:
     9a8:	aa 1b       	sub	r26, r26
     9aa:	bb 1b       	sub	r27, r27
     9ac:	51 e1       	ldi	r21, 0x11	; 17
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <__udivmodhi4_ep>

000009b0 <__udivmodhi4_loop>:
     9b0:	aa 1f       	adc	r26, r26
     9b2:	bb 1f       	adc	r27, r27
     9b4:	a6 17       	cp	r26, r22
     9b6:	b7 07       	cpc	r27, r23
     9b8:	10 f0       	brcs	.+4      	; 0x9be <__udivmodhi4_ep>
     9ba:	a6 1b       	sub	r26, r22
     9bc:	b7 0b       	sbc	r27, r23

000009be <__udivmodhi4_ep>:
     9be:	88 1f       	adc	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	5a 95       	dec	r21
     9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__udivmodhi4_loop>
     9c6:	80 95       	com	r24
     9c8:	90 95       	com	r25
     9ca:	bc 01       	movw	r22, r24
     9cc:	cd 01       	movw	r24, r26
     9ce:	08 95       	ret

000009d0 <fdevopen>:
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
     9da:	8b 01       	movw	r16, r22
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	31 f4       	brne	.+12     	; 0x9ec <fdevopen+0x1c>
     9e0:	61 15       	cp	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	19 f4       	brne	.+6      	; 0x9ec <fdevopen+0x1c>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	38 c0       	rjmp	.+112    	; 0xa5c <fdevopen+0x8c>
     9ec:	6e e0       	ldi	r22, 0x0E	; 14
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 4d 07 	call	0xe9a	; 0xe9a <calloc>
     9f8:	fc 01       	movw	r30, r24
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	a1 f3       	breq	.-24     	; 0x9e6 <fdevopen+0x16>
     9fe:	80 e8       	ldi	r24, 0x80	; 128
     a00:	83 83       	std	Z+3, r24	; 0x03
     a02:	01 15       	cp	r16, r1
     a04:	11 05       	cpc	r17, r1
     a06:	71 f0       	breq	.+28     	; 0xa24 <fdevopen+0x54>
     a08:	13 87       	std	Z+11, r17	; 0x0b
     a0a:	02 87       	std	Z+10, r16	; 0x0a
     a0c:	81 e8       	ldi	r24, 0x81	; 129
     a0e:	83 83       	std	Z+3, r24	; 0x03
     a10:	80 91 77 01 	lds	r24, 0x0177
     a14:	90 91 78 01 	lds	r25, 0x0178
     a18:	89 2b       	or	r24, r25
     a1a:	21 f4       	brne	.+8      	; 0xa24 <fdevopen+0x54>
     a1c:	f0 93 78 01 	sts	0x0178, r31
     a20:	e0 93 77 01 	sts	0x0177, r30
     a24:	20 97       	sbiw	r28, 0x00	; 0
     a26:	c9 f0       	breq	.+50     	; 0xa5a <fdevopen+0x8a>
     a28:	d1 87       	std	Z+9, r29	; 0x09
     a2a:	c0 87       	std	Z+8, r28	; 0x08
     a2c:	83 81       	ldd	r24, Z+3	; 0x03
     a2e:	82 60       	ori	r24, 0x02	; 2
     a30:	83 83       	std	Z+3, r24	; 0x03
     a32:	80 91 79 01 	lds	r24, 0x0179
     a36:	90 91 7a 01 	lds	r25, 0x017A
     a3a:	89 2b       	or	r24, r25
     a3c:	71 f4       	brne	.+28     	; 0xa5a <fdevopen+0x8a>
     a3e:	f0 93 7a 01 	sts	0x017A, r31
     a42:	e0 93 79 01 	sts	0x0179, r30
     a46:	80 91 7b 01 	lds	r24, 0x017B
     a4a:	90 91 7c 01 	lds	r25, 0x017C
     a4e:	89 2b       	or	r24, r25
     a50:	21 f4       	brne	.+8      	; 0xa5a <fdevopen+0x8a>
     a52:	f0 93 7c 01 	sts	0x017C, r31
     a56:	e0 93 7b 01 	sts	0x017B, r30
     a5a:	cf 01       	movw	r24, r30
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <printf>:
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e9 e3       	ldi	r30, 0x39	; 57
     a6c:	f5 e0       	ldi	r31, 0x05	; 5
     a6e:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__prologue_saves__+0x20>
     a72:	fe 01       	movw	r30, r28
     a74:	35 96       	adiw	r30, 0x05	; 5
     a76:	61 91       	ld	r22, Z+
     a78:	71 91       	ld	r23, Z+
     a7a:	af 01       	movw	r20, r30
     a7c:	80 91 79 01 	lds	r24, 0x0179
     a80:	90 91 7a 01 	lds	r25, 0x017A
     a84:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <vfprintf>
     a88:	e2 e0       	ldi	r30, 0x02	; 2
     a8a:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__epilogue_restores__+0x20>

00000a8e <putchar>:
     a8e:	60 91 79 01 	lds	r22, 0x0179
     a92:	70 91 7a 01 	lds	r23, 0x017A
     a96:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     a9a:	08 95       	ret

00000a9c <puts>:
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	e0 91 79 01 	lds	r30, 0x0179
     aa8:	f0 91 7a 01 	lds	r31, 0x017A
     aac:	23 81       	ldd	r18, Z+3	; 0x03
     aae:	21 ff       	sbrs	r18, 1
     ab0:	1b c0       	rjmp	.+54     	; 0xae8 <puts+0x4c>
     ab2:	ec 01       	movw	r28, r24
     ab4:	00 e0       	ldi	r16, 0x00	; 0
     ab6:	10 e0       	ldi	r17, 0x00	; 0
     ab8:	89 91       	ld	r24, Y+
     aba:	60 91 79 01 	lds	r22, 0x0179
     abe:	70 91 7a 01 	lds	r23, 0x017A
     ac2:	db 01       	movw	r26, r22
     ac4:	18 96       	adiw	r26, 0x08	; 8
     ac6:	ed 91       	ld	r30, X+
     ac8:	fc 91       	ld	r31, X
     aca:	19 97       	sbiw	r26, 0x09	; 9
     acc:	88 23       	and	r24, r24
     ace:	31 f0       	breq	.+12     	; 0xadc <puts+0x40>
     ad0:	09 95       	icall
     ad2:	89 2b       	or	r24, r25
     ad4:	89 f3       	breq	.-30     	; 0xab8 <puts+0x1c>
     ad6:	0f ef       	ldi	r16, 0xFF	; 255
     ad8:	1f ef       	ldi	r17, 0xFF	; 255
     ada:	ee cf       	rjmp	.-36     	; 0xab8 <puts+0x1c>
     adc:	8a e0       	ldi	r24, 0x0A	; 10
     ade:	09 95       	icall
     ae0:	89 2b       	or	r24, r25
     ae2:	11 f4       	brne	.+4      	; 0xae8 <puts+0x4c>
     ae4:	c8 01       	movw	r24, r16
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <puts+0x50>
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	08 95       	ret

00000af6 <vfprintf>:
     af6:	ac e0       	ldi	r26, 0x0C	; 12
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e1 e8       	ldi	r30, 0x81	; 129
     afc:	f5 e0       	ldi	r31, 0x05	; 5
     afe:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__prologue_saves__>
     b02:	7c 01       	movw	r14, r24
     b04:	6b 01       	movw	r12, r22
     b06:	8a 01       	movw	r16, r20
     b08:	fc 01       	movw	r30, r24
     b0a:	17 82       	std	Z+7, r1	; 0x07
     b0c:	16 82       	std	Z+6, r1	; 0x06
     b0e:	83 81       	ldd	r24, Z+3	; 0x03
     b10:	81 ff       	sbrs	r24, 1
     b12:	bd c1       	rjmp	.+890    	; 0xe8e <vfprintf+0x398>
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	4c 01       	movw	r8, r24
     b1a:	f7 01       	movw	r30, r14
     b1c:	93 81       	ldd	r25, Z+3	; 0x03
     b1e:	f6 01       	movw	r30, r12
     b20:	93 fd       	sbrc	r25, 3
     b22:	85 91       	lpm	r24, Z+
     b24:	93 ff       	sbrs	r25, 3
     b26:	81 91       	ld	r24, Z+
     b28:	6f 01       	movw	r12, r30
     b2a:	88 23       	and	r24, r24
     b2c:	09 f4       	brne	.+2      	; 0xb30 <vfprintf+0x3a>
     b2e:	ab c1       	rjmp	.+854    	; 0xe86 <vfprintf+0x390>
     b30:	85 32       	cpi	r24, 0x25	; 37
     b32:	39 f4       	brne	.+14     	; 0xb42 <vfprintf+0x4c>
     b34:	93 fd       	sbrc	r25, 3
     b36:	85 91       	lpm	r24, Z+
     b38:	93 ff       	sbrs	r25, 3
     b3a:	81 91       	ld	r24, Z+
     b3c:	6f 01       	movw	r12, r30
     b3e:	85 32       	cpi	r24, 0x25	; 37
     b40:	29 f4       	brne	.+10     	; 0xb4c <vfprintf+0x56>
     b42:	b7 01       	movw	r22, r14
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     b4a:	e7 cf       	rjmp	.-50     	; 0xb1a <vfprintf+0x24>
     b4c:	51 2c       	mov	r5, r1
     b4e:	31 2c       	mov	r3, r1
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	20 32       	cpi	r18, 0x20	; 32
     b54:	a0 f4       	brcc	.+40     	; 0xb7e <vfprintf+0x88>
     b56:	8b 32       	cpi	r24, 0x2B	; 43
     b58:	69 f0       	breq	.+26     	; 0xb74 <vfprintf+0x7e>
     b5a:	30 f4       	brcc	.+12     	; 0xb68 <vfprintf+0x72>
     b5c:	80 32       	cpi	r24, 0x20	; 32
     b5e:	59 f0       	breq	.+22     	; 0xb76 <vfprintf+0x80>
     b60:	83 32       	cpi	r24, 0x23	; 35
     b62:	69 f4       	brne	.+26     	; 0xb7e <vfprintf+0x88>
     b64:	20 61       	ori	r18, 0x10	; 16
     b66:	2c c0       	rjmp	.+88     	; 0xbc0 <vfprintf+0xca>
     b68:	8d 32       	cpi	r24, 0x2D	; 45
     b6a:	39 f0       	breq	.+14     	; 0xb7a <vfprintf+0x84>
     b6c:	80 33       	cpi	r24, 0x30	; 48
     b6e:	39 f4       	brne	.+14     	; 0xb7e <vfprintf+0x88>
     b70:	21 60       	ori	r18, 0x01	; 1
     b72:	26 c0       	rjmp	.+76     	; 0xbc0 <vfprintf+0xca>
     b74:	22 60       	ori	r18, 0x02	; 2
     b76:	24 60       	ori	r18, 0x04	; 4
     b78:	23 c0       	rjmp	.+70     	; 0xbc0 <vfprintf+0xca>
     b7a:	28 60       	ori	r18, 0x08	; 8
     b7c:	21 c0       	rjmp	.+66     	; 0xbc0 <vfprintf+0xca>
     b7e:	27 fd       	sbrc	r18, 7
     b80:	27 c0       	rjmp	.+78     	; 0xbd0 <vfprintf+0xda>
     b82:	30 ed       	ldi	r19, 0xD0	; 208
     b84:	38 0f       	add	r19, r24
     b86:	3a 30       	cpi	r19, 0x0A	; 10
     b88:	78 f4       	brcc	.+30     	; 0xba8 <vfprintf+0xb2>
     b8a:	26 ff       	sbrs	r18, 6
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <vfprintf+0xa4>
     b8e:	fa e0       	ldi	r31, 0x0A	; 10
     b90:	5f 9e       	mul	r5, r31
     b92:	30 0d       	add	r19, r0
     b94:	11 24       	eor	r1, r1
     b96:	53 2e       	mov	r5, r19
     b98:	13 c0       	rjmp	.+38     	; 0xbc0 <vfprintf+0xca>
     b9a:	8a e0       	ldi	r24, 0x0A	; 10
     b9c:	38 9e       	mul	r3, r24
     b9e:	30 0d       	add	r19, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	33 2e       	mov	r3, r19
     ba4:	20 62       	ori	r18, 0x20	; 32
     ba6:	0c c0       	rjmp	.+24     	; 0xbc0 <vfprintf+0xca>
     ba8:	8e 32       	cpi	r24, 0x2E	; 46
     baa:	21 f4       	brne	.+8      	; 0xbb4 <vfprintf+0xbe>
     bac:	26 fd       	sbrc	r18, 6
     bae:	6b c1       	rjmp	.+726    	; 0xe86 <vfprintf+0x390>
     bb0:	20 64       	ori	r18, 0x40	; 64
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <vfprintf+0xca>
     bb4:	8c 36       	cpi	r24, 0x6C	; 108
     bb6:	11 f4       	brne	.+4      	; 0xbbc <vfprintf+0xc6>
     bb8:	20 68       	ori	r18, 0x80	; 128
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <vfprintf+0xca>
     bbc:	88 36       	cpi	r24, 0x68	; 104
     bbe:	41 f4       	brne	.+16     	; 0xbd0 <vfprintf+0xda>
     bc0:	f6 01       	movw	r30, r12
     bc2:	93 fd       	sbrc	r25, 3
     bc4:	85 91       	lpm	r24, Z+
     bc6:	93 ff       	sbrs	r25, 3
     bc8:	81 91       	ld	r24, Z+
     bca:	6f 01       	movw	r12, r30
     bcc:	81 11       	cpse	r24, r1
     bce:	c1 cf       	rjmp	.-126    	; 0xb52 <vfprintf+0x5c>
     bd0:	98 2f       	mov	r25, r24
     bd2:	9f 7d       	andi	r25, 0xDF	; 223
     bd4:	95 54       	subi	r25, 0x45	; 69
     bd6:	93 30       	cpi	r25, 0x03	; 3
     bd8:	28 f4       	brcc	.+10     	; 0xbe4 <vfprintf+0xee>
     bda:	0c 5f       	subi	r16, 0xFC	; 252
     bdc:	1f 4f       	sbci	r17, 0xFF	; 255
     bde:	ff e3       	ldi	r31, 0x3F	; 63
     be0:	f9 83       	std	Y+1, r31	; 0x01
     be2:	0d c0       	rjmp	.+26     	; 0xbfe <vfprintf+0x108>
     be4:	83 36       	cpi	r24, 0x63	; 99
     be6:	31 f0       	breq	.+12     	; 0xbf4 <vfprintf+0xfe>
     be8:	83 37       	cpi	r24, 0x73	; 115
     bea:	71 f0       	breq	.+28     	; 0xc08 <vfprintf+0x112>
     bec:	83 35       	cpi	r24, 0x53	; 83
     bee:	09 f0       	breq	.+2      	; 0xbf2 <vfprintf+0xfc>
     bf0:	5b c0       	rjmp	.+182    	; 0xca8 <vfprintf+0x1b2>
     bf2:	22 c0       	rjmp	.+68     	; 0xc38 <vfprintf+0x142>
     bf4:	f8 01       	movw	r30, r16
     bf6:	80 81       	ld	r24, Z
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	0e 5f       	subi	r16, 0xFE	; 254
     bfc:	1f 4f       	sbci	r17, 0xFF	; 255
     bfe:	44 24       	eor	r4, r4
     c00:	43 94       	inc	r4
     c02:	51 2c       	mov	r5, r1
     c04:	54 01       	movw	r10, r8
     c06:	15 c0       	rjmp	.+42     	; 0xc32 <vfprintf+0x13c>
     c08:	38 01       	movw	r6, r16
     c0a:	f2 e0       	ldi	r31, 0x02	; 2
     c0c:	6f 0e       	add	r6, r31
     c0e:	71 1c       	adc	r7, r1
     c10:	f8 01       	movw	r30, r16
     c12:	a0 80       	ld	r10, Z
     c14:	b1 80       	ldd	r11, Z+1	; 0x01
     c16:	26 ff       	sbrs	r18, 6
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <vfprintf+0x12a>
     c1a:	65 2d       	mov	r22, r5
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x12e>
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	c5 01       	movw	r24, r10
     c26:	2c 87       	std	Y+12, r18	; 0x0c
     c28:	0e 94 a2 08 	call	0x1144	; 0x1144 <strnlen>
     c2c:	2c 01       	movw	r4, r24
     c2e:	83 01       	movw	r16, r6
     c30:	2c 85       	ldd	r18, Y+12	; 0x0c
     c32:	2f 77       	andi	r18, 0x7F	; 127
     c34:	22 2e       	mov	r2, r18
     c36:	17 c0       	rjmp	.+46     	; 0xc66 <vfprintf+0x170>
     c38:	38 01       	movw	r6, r16
     c3a:	f2 e0       	ldi	r31, 0x02	; 2
     c3c:	6f 0e       	add	r6, r31
     c3e:	71 1c       	adc	r7, r1
     c40:	f8 01       	movw	r30, r16
     c42:	a0 80       	ld	r10, Z
     c44:	b1 80       	ldd	r11, Z+1	; 0x01
     c46:	26 ff       	sbrs	r18, 6
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x15a>
     c4a:	65 2d       	mov	r22, r5
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x15e>
     c50:	6f ef       	ldi	r22, 0xFF	; 255
     c52:	7f ef       	ldi	r23, 0xFF	; 255
     c54:	c5 01       	movw	r24, r10
     c56:	2c 87       	std	Y+12, r18	; 0x0c
     c58:	0e 94 90 08 	call	0x1120	; 0x1120 <strnlen_P>
     c5c:	2c 01       	movw	r4, r24
     c5e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c60:	20 68       	ori	r18, 0x80	; 128
     c62:	22 2e       	mov	r2, r18
     c64:	83 01       	movw	r16, r6
     c66:	23 fc       	sbrc	r2, 3
     c68:	1b c0       	rjmp	.+54     	; 0xca0 <vfprintf+0x1aa>
     c6a:	83 2d       	mov	r24, r3
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	48 16       	cp	r4, r24
     c70:	59 06       	cpc	r5, r25
     c72:	b0 f4       	brcc	.+44     	; 0xca0 <vfprintf+0x1aa>
     c74:	b7 01       	movw	r22, r14
     c76:	80 e2       	ldi	r24, 0x20	; 32
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     c7e:	3a 94       	dec	r3
     c80:	f4 cf       	rjmp	.-24     	; 0xc6a <vfprintf+0x174>
     c82:	f5 01       	movw	r30, r10
     c84:	27 fc       	sbrc	r2, 7
     c86:	85 91       	lpm	r24, Z+
     c88:	27 fe       	sbrs	r2, 7
     c8a:	81 91       	ld	r24, Z+
     c8c:	5f 01       	movw	r10, r30
     c8e:	b7 01       	movw	r22, r14
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     c96:	31 10       	cpse	r3, r1
     c98:	3a 94       	dec	r3
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
     c9c:	4f 1a       	sub	r4, r31
     c9e:	51 08       	sbc	r5, r1
     ca0:	41 14       	cp	r4, r1
     ca2:	51 04       	cpc	r5, r1
     ca4:	71 f7       	brne	.-36     	; 0xc82 <vfprintf+0x18c>
     ca6:	e5 c0       	rjmp	.+458    	; 0xe72 <vfprintf+0x37c>
     ca8:	84 36       	cpi	r24, 0x64	; 100
     caa:	11 f0       	breq	.+4      	; 0xcb0 <vfprintf+0x1ba>
     cac:	89 36       	cpi	r24, 0x69	; 105
     cae:	39 f5       	brne	.+78     	; 0xcfe <vfprintf+0x208>
     cb0:	f8 01       	movw	r30, r16
     cb2:	27 ff       	sbrs	r18, 7
     cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <vfprintf+0x1ce>
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	0c 5f       	subi	r16, 0xFC	; 252
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <vfprintf+0x1de>
     cc4:	60 81       	ld	r22, Z
     cc6:	71 81       	ldd	r23, Z+1	; 0x01
     cc8:	88 27       	eor	r24, r24
     cca:	77 fd       	sbrc	r23, 7
     ccc:	80 95       	com	r24
     cce:	98 2f       	mov	r25, r24
     cd0:	0e 5f       	subi	r16, 0xFE	; 254
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	2f 76       	andi	r18, 0x6F	; 111
     cd6:	b2 2e       	mov	r11, r18
     cd8:	97 ff       	sbrs	r25, 7
     cda:	09 c0       	rjmp	.+18     	; 0xcee <vfprintf+0x1f8>
     cdc:	90 95       	com	r25
     cde:	80 95       	com	r24
     ce0:	70 95       	com	r23
     ce2:	61 95       	neg	r22
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	8f 4f       	sbci	r24, 0xFF	; 255
     ce8:	9f 4f       	sbci	r25, 0xFF	; 255
     cea:	20 68       	ori	r18, 0x80	; 128
     cec:	b2 2e       	mov	r11, r18
     cee:	2a e0       	ldi	r18, 0x0A	; 10
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	a4 01       	movw	r20, r8
     cf4:	0e 94 df 08 	call	0x11be	; 0x11be <__ultoa_invert>
     cf8:	a8 2e       	mov	r10, r24
     cfa:	a8 18       	sub	r10, r8
     cfc:	44 c0       	rjmp	.+136    	; 0xd86 <vfprintf+0x290>
     cfe:	85 37       	cpi	r24, 0x75	; 117
     d00:	29 f4       	brne	.+10     	; 0xd0c <vfprintf+0x216>
     d02:	2f 7e       	andi	r18, 0xEF	; 239
     d04:	b2 2e       	mov	r11, r18
     d06:	2a e0       	ldi	r18, 0x0A	; 10
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	25 c0       	rjmp	.+74     	; 0xd56 <vfprintf+0x260>
     d0c:	f2 2f       	mov	r31, r18
     d0e:	f9 7f       	andi	r31, 0xF9	; 249
     d10:	bf 2e       	mov	r11, r31
     d12:	8f 36       	cpi	r24, 0x6F	; 111
     d14:	c1 f0       	breq	.+48     	; 0xd46 <vfprintf+0x250>
     d16:	18 f4       	brcc	.+6      	; 0xd1e <vfprintf+0x228>
     d18:	88 35       	cpi	r24, 0x58	; 88
     d1a:	79 f0       	breq	.+30     	; 0xd3a <vfprintf+0x244>
     d1c:	b4 c0       	rjmp	.+360    	; 0xe86 <vfprintf+0x390>
     d1e:	80 37       	cpi	r24, 0x70	; 112
     d20:	19 f0       	breq	.+6      	; 0xd28 <vfprintf+0x232>
     d22:	88 37       	cpi	r24, 0x78	; 120
     d24:	21 f0       	breq	.+8      	; 0xd2e <vfprintf+0x238>
     d26:	af c0       	rjmp	.+350    	; 0xe86 <vfprintf+0x390>
     d28:	2f 2f       	mov	r18, r31
     d2a:	20 61       	ori	r18, 0x10	; 16
     d2c:	b2 2e       	mov	r11, r18
     d2e:	b4 fe       	sbrs	r11, 4
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <vfprintf+0x256>
     d32:	8b 2d       	mov	r24, r11
     d34:	84 60       	ori	r24, 0x04	; 4
     d36:	b8 2e       	mov	r11, r24
     d38:	09 c0       	rjmp	.+18     	; 0xd4c <vfprintf+0x256>
     d3a:	24 ff       	sbrs	r18, 4
     d3c:	0a c0       	rjmp	.+20     	; 0xd52 <vfprintf+0x25c>
     d3e:	9f 2f       	mov	r25, r31
     d40:	96 60       	ori	r25, 0x06	; 6
     d42:	b9 2e       	mov	r11, r25
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <vfprintf+0x25c>
     d46:	28 e0       	ldi	r18, 0x08	; 8
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <vfprintf+0x260>
     d4c:	20 e1       	ldi	r18, 0x10	; 16
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0x260>
     d52:	20 e1       	ldi	r18, 0x10	; 16
     d54:	32 e0       	ldi	r19, 0x02	; 2
     d56:	f8 01       	movw	r30, r16
     d58:	b7 fe       	sbrs	r11, 7
     d5a:	07 c0       	rjmp	.+14     	; 0xd6a <vfprintf+0x274>
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	0c 5f       	subi	r16, 0xFC	; 252
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	06 c0       	rjmp	.+12     	; 0xd76 <vfprintf+0x280>
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 5f       	subi	r16, 0xFE	; 254
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	a4 01       	movw	r20, r8
     d78:	0e 94 df 08 	call	0x11be	; 0x11be <__ultoa_invert>
     d7c:	a8 2e       	mov	r10, r24
     d7e:	a8 18       	sub	r10, r8
     d80:	fb 2d       	mov	r31, r11
     d82:	ff 77       	andi	r31, 0x7F	; 127
     d84:	bf 2e       	mov	r11, r31
     d86:	b6 fe       	sbrs	r11, 6
     d88:	0b c0       	rjmp	.+22     	; 0xda0 <vfprintf+0x2aa>
     d8a:	2b 2d       	mov	r18, r11
     d8c:	2e 7f       	andi	r18, 0xFE	; 254
     d8e:	a5 14       	cp	r10, r5
     d90:	50 f4       	brcc	.+20     	; 0xda6 <vfprintf+0x2b0>
     d92:	b4 fe       	sbrs	r11, 4
     d94:	0a c0       	rjmp	.+20     	; 0xdaa <vfprintf+0x2b4>
     d96:	b2 fc       	sbrc	r11, 2
     d98:	08 c0       	rjmp	.+16     	; 0xdaa <vfprintf+0x2b4>
     d9a:	2b 2d       	mov	r18, r11
     d9c:	2e 7e       	andi	r18, 0xEE	; 238
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <vfprintf+0x2b4>
     da0:	7a 2c       	mov	r7, r10
     da2:	2b 2d       	mov	r18, r11
     da4:	03 c0       	rjmp	.+6      	; 0xdac <vfprintf+0x2b6>
     da6:	7a 2c       	mov	r7, r10
     da8:	01 c0       	rjmp	.+2      	; 0xdac <vfprintf+0x2b6>
     daa:	75 2c       	mov	r7, r5
     dac:	24 ff       	sbrs	r18, 4
     dae:	0d c0       	rjmp	.+26     	; 0xdca <vfprintf+0x2d4>
     db0:	fe 01       	movw	r30, r28
     db2:	ea 0d       	add	r30, r10
     db4:	f1 1d       	adc	r31, r1
     db6:	80 81       	ld	r24, Z
     db8:	80 33       	cpi	r24, 0x30	; 48
     dba:	11 f4       	brne	.+4      	; 0xdc0 <vfprintf+0x2ca>
     dbc:	29 7e       	andi	r18, 0xE9	; 233
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <vfprintf+0x2dc>
     dc0:	22 ff       	sbrs	r18, 2
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0x2da>
     dc4:	73 94       	inc	r7
     dc6:	73 94       	inc	r7
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <vfprintf+0x2dc>
     dca:	82 2f       	mov	r24, r18
     dcc:	86 78       	andi	r24, 0x86	; 134
     dce:	09 f0       	breq	.+2      	; 0xdd2 <vfprintf+0x2dc>
     dd0:	73 94       	inc	r7
     dd2:	23 fd       	sbrc	r18, 3
     dd4:	13 c0       	rjmp	.+38     	; 0xdfc <vfprintf+0x306>
     dd6:	20 ff       	sbrs	r18, 0
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <vfprintf+0x2f0>
     dda:	5a 2c       	mov	r5, r10
     ddc:	73 14       	cp	r7, r3
     dde:	18 f4       	brcc	.+6      	; 0xde6 <vfprintf+0x2f0>
     de0:	53 0c       	add	r5, r3
     de2:	57 18       	sub	r5, r7
     de4:	73 2c       	mov	r7, r3
     de6:	73 14       	cp	r7, r3
     de8:	68 f4       	brcc	.+26     	; 0xe04 <vfprintf+0x30e>
     dea:	b7 01       	movw	r22, r14
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	2c 87       	std	Y+12, r18	; 0x0c
     df2:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     df6:	73 94       	inc	r7
     df8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dfa:	f5 cf       	rjmp	.-22     	; 0xde6 <vfprintf+0x2f0>
     dfc:	73 14       	cp	r7, r3
     dfe:	10 f4       	brcc	.+4      	; 0xe04 <vfprintf+0x30e>
     e00:	37 18       	sub	r3, r7
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <vfprintf+0x310>
     e04:	31 2c       	mov	r3, r1
     e06:	24 ff       	sbrs	r18, 4
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <vfprintf+0x338>
     e0a:	b7 01       	movw	r22, r14
     e0c:	80 e3       	ldi	r24, 0x30	; 48
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	2c 87       	std	Y+12, r18	; 0x0c
     e12:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     e16:	2c 85       	ldd	r18, Y+12	; 0x0c
     e18:	22 ff       	sbrs	r18, 2
     e1a:	17 c0       	rjmp	.+46     	; 0xe4a <vfprintf+0x354>
     e1c:	21 ff       	sbrs	r18, 1
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <vfprintf+0x330>
     e20:	88 e5       	ldi	r24, 0x58	; 88
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <vfprintf+0x334>
     e26:	88 e7       	ldi	r24, 0x78	; 120
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	b7 01       	movw	r22, r14
     e2c:	0c c0       	rjmp	.+24     	; 0xe46 <vfprintf+0x350>
     e2e:	82 2f       	mov	r24, r18
     e30:	86 78       	andi	r24, 0x86	; 134
     e32:	59 f0       	breq	.+22     	; 0xe4a <vfprintf+0x354>
     e34:	21 fd       	sbrc	r18, 1
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <vfprintf+0x346>
     e38:	80 e2       	ldi	r24, 0x20	; 32
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <vfprintf+0x348>
     e3c:	8b e2       	ldi	r24, 0x2B	; 43
     e3e:	27 fd       	sbrc	r18, 7
     e40:	8d e2       	ldi	r24, 0x2D	; 45
     e42:	b7 01       	movw	r22, r14
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     e4a:	a5 14       	cp	r10, r5
     e4c:	38 f4       	brcc	.+14     	; 0xe5c <vfprintf+0x366>
     e4e:	b7 01       	movw	r22, r14
     e50:	80 e3       	ldi	r24, 0x30	; 48
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     e58:	5a 94       	dec	r5
     e5a:	f7 cf       	rjmp	.-18     	; 0xe4a <vfprintf+0x354>
     e5c:	aa 94       	dec	r10
     e5e:	f4 01       	movw	r30, r8
     e60:	ea 0d       	add	r30, r10
     e62:	f1 1d       	adc	r31, r1
     e64:	80 81       	ld	r24, Z
     e66:	b7 01       	movw	r22, r14
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     e6e:	a1 10       	cpse	r10, r1
     e70:	f5 cf       	rjmp	.-22     	; 0xe5c <vfprintf+0x366>
     e72:	33 20       	and	r3, r3
     e74:	09 f4       	brne	.+2      	; 0xe78 <vfprintf+0x382>
     e76:	51 ce       	rjmp	.-862    	; 0xb1a <vfprintf+0x24>
     e78:	b7 01       	movw	r22, r14
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 ad 08 	call	0x115a	; 0x115a <fputc>
     e82:	3a 94       	dec	r3
     e84:	f6 cf       	rjmp	.-20     	; 0xe72 <vfprintf+0x37c>
     e86:	f7 01       	movw	r30, r14
     e88:	86 81       	ldd	r24, Z+6	; 0x06
     e8a:	97 81       	ldd	r25, Z+7	; 0x07
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <vfprintf+0x39c>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	2c 96       	adiw	r28, 0x0c	; 12
     e94:	e2 e1       	ldi	r30, 0x12	; 18
     e96:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__epilogue_restores__>

00000e9a <calloc>:
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	86 9f       	mul	r24, r22
     ea4:	80 01       	movw	r16, r0
     ea6:	87 9f       	mul	r24, r23
     ea8:	10 0d       	add	r17, r0
     eaa:	96 9f       	mul	r25, r22
     eac:	10 0d       	add	r17, r0
     eae:	11 24       	eor	r1, r1
     eb0:	c8 01       	movw	r24, r16
     eb2:	0e 94 69 07 	call	0xed2	; 0xed2 <malloc>
     eb6:	ec 01       	movw	r28, r24
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	29 f0       	breq	.+10     	; 0xec6 <calloc+0x2c>
     ebc:	a8 01       	movw	r20, r16
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	0e 94 9b 08 	call	0x1136	; 0x1136 <memset>
     ec6:	ce 01       	movw	r24, r28
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <malloc>:
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	91 05       	cpc	r25, r1
     eda:	10 f4       	brcc	.+4      	; 0xee0 <malloc+0xe>
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	e0 91 7f 01 	lds	r30, 0x017F
     ee4:	f0 91 80 01 	lds	r31, 0x0180
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	39 f1       	breq	.+78     	; 0xf42 <malloc+0x70>
     ef4:	40 81       	ld	r20, Z
     ef6:	51 81       	ldd	r21, Z+1	; 0x01
     ef8:	48 17       	cp	r20, r24
     efa:	59 07       	cpc	r21, r25
     efc:	b8 f0       	brcs	.+46     	; 0xf2c <malloc+0x5a>
     efe:	48 17       	cp	r20, r24
     f00:	59 07       	cpc	r21, r25
     f02:	71 f4       	brne	.+28     	; 0xf20 <malloc+0x4e>
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	10 97       	sbiw	r26, 0x00	; 0
     f0a:	29 f0       	breq	.+10     	; 0xf16 <malloc+0x44>
     f0c:	13 96       	adiw	r26, 0x03	; 3
     f0e:	9c 93       	st	X, r25
     f10:	8e 93       	st	-X, r24
     f12:	12 97       	sbiw	r26, 0x02	; 2
     f14:	2c c0       	rjmp	.+88     	; 0xf6e <malloc+0x9c>
     f16:	90 93 80 01 	sts	0x0180, r25
     f1a:	80 93 7f 01 	sts	0x017F, r24
     f1e:	27 c0       	rjmp	.+78     	; 0xf6e <malloc+0x9c>
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	31 f0       	breq	.+12     	; 0xf32 <malloc+0x60>
     f26:	42 17       	cp	r20, r18
     f28:	53 07       	cpc	r21, r19
     f2a:	18 f0       	brcs	.+6      	; 0xf32 <malloc+0x60>
     f2c:	a9 01       	movw	r20, r18
     f2e:	db 01       	movw	r26, r22
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <malloc+0x62>
     f32:	ef 01       	movw	r28, r30
     f34:	9a 01       	movw	r18, r20
     f36:	bd 01       	movw	r22, r26
     f38:	df 01       	movw	r26, r30
     f3a:	02 80       	ldd	r0, Z+2	; 0x02
     f3c:	f3 81       	ldd	r31, Z+3	; 0x03
     f3e:	e0 2d       	mov	r30, r0
     f40:	d7 cf       	rjmp	.-82     	; 0xef0 <malloc+0x1e>
     f42:	21 15       	cp	r18, r1
     f44:	31 05       	cpc	r19, r1
     f46:	f9 f0       	breq	.+62     	; 0xf86 <malloc+0xb4>
     f48:	28 1b       	sub	r18, r24
     f4a:	39 0b       	sbc	r19, r25
     f4c:	24 30       	cpi	r18, 0x04	; 4
     f4e:	31 05       	cpc	r19, r1
     f50:	80 f4       	brcc	.+32     	; 0xf72 <malloc+0xa0>
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	9b 81       	ldd	r25, Y+3	; 0x03
     f56:	61 15       	cp	r22, r1
     f58:	71 05       	cpc	r23, r1
     f5a:	21 f0       	breq	.+8      	; 0xf64 <malloc+0x92>
     f5c:	fb 01       	movw	r30, r22
     f5e:	93 83       	std	Z+3, r25	; 0x03
     f60:	82 83       	std	Z+2, r24	; 0x02
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <malloc+0x9a>
     f64:	90 93 80 01 	sts	0x0180, r25
     f68:	80 93 7f 01 	sts	0x017F, r24
     f6c:	fe 01       	movw	r30, r28
     f6e:	32 96       	adiw	r30, 0x02	; 2
     f70:	44 c0       	rjmp	.+136    	; 0xffa <malloc+0x128>
     f72:	fe 01       	movw	r30, r28
     f74:	e2 0f       	add	r30, r18
     f76:	f3 1f       	adc	r31, r19
     f78:	81 93       	st	Z+, r24
     f7a:	91 93       	st	Z+, r25
     f7c:	22 50       	subi	r18, 0x02	; 2
     f7e:	31 09       	sbc	r19, r1
     f80:	39 83       	std	Y+1, r19	; 0x01
     f82:	28 83       	st	Y, r18
     f84:	3a c0       	rjmp	.+116    	; 0xffa <malloc+0x128>
     f86:	20 91 7d 01 	lds	r18, 0x017D
     f8a:	30 91 7e 01 	lds	r19, 0x017E
     f8e:	23 2b       	or	r18, r19
     f90:	41 f4       	brne	.+16     	; 0xfa2 <malloc+0xd0>
     f92:	20 91 02 01 	lds	r18, 0x0102
     f96:	30 91 03 01 	lds	r19, 0x0103
     f9a:	30 93 7e 01 	sts	0x017E, r19
     f9e:	20 93 7d 01 	sts	0x017D, r18
     fa2:	20 91 00 01 	lds	r18, 0x0100
     fa6:	30 91 01 01 	lds	r19, 0x0101
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	41 f4       	brne	.+16     	; 0xfc0 <malloc+0xee>
     fb0:	2d b7       	in	r18, 0x3d	; 61
     fb2:	3e b7       	in	r19, 0x3e	; 62
     fb4:	40 91 04 01 	lds	r20, 0x0104
     fb8:	50 91 05 01 	lds	r21, 0x0105
     fbc:	24 1b       	sub	r18, r20
     fbe:	35 0b       	sbc	r19, r21
     fc0:	e0 91 7d 01 	lds	r30, 0x017D
     fc4:	f0 91 7e 01 	lds	r31, 0x017E
     fc8:	e2 17       	cp	r30, r18
     fca:	f3 07       	cpc	r31, r19
     fcc:	a0 f4       	brcc	.+40     	; 0xff6 <malloc+0x124>
     fce:	2e 1b       	sub	r18, r30
     fd0:	3f 0b       	sbc	r19, r31
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	78 f0       	brcs	.+30     	; 0xff6 <malloc+0x124>
     fd8:	ac 01       	movw	r20, r24
     fda:	4e 5f       	subi	r20, 0xFE	; 254
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	24 17       	cp	r18, r20
     fe0:	35 07       	cpc	r19, r21
     fe2:	48 f0       	brcs	.+18     	; 0xff6 <malloc+0x124>
     fe4:	4e 0f       	add	r20, r30
     fe6:	5f 1f       	adc	r21, r31
     fe8:	50 93 7e 01 	sts	0x017E, r21
     fec:	40 93 7d 01 	sts	0x017D, r20
     ff0:	81 93       	st	Z+, r24
     ff2:	91 93       	st	Z+, r25
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <malloc+0x128>
     ff6:	e0 e0       	ldi	r30, 0x00	; 0
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	cf 01       	movw	r24, r30
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <free>:
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	09 f4       	brne	.+2      	; 0x100c <free+0xa>
    100a:	87 c0       	rjmp	.+270    	; 0x111a <free+0x118>
    100c:	fc 01       	movw	r30, r24
    100e:	32 97       	sbiw	r30, 0x02	; 2
    1010:	13 82       	std	Z+3, r1	; 0x03
    1012:	12 82       	std	Z+2, r1	; 0x02
    1014:	c0 91 7f 01 	lds	r28, 0x017F
    1018:	d0 91 80 01 	lds	r29, 0x0180
    101c:	20 97       	sbiw	r28, 0x00	; 0
    101e:	81 f4       	brne	.+32     	; 0x1040 <free+0x3e>
    1020:	20 81       	ld	r18, Z
    1022:	31 81       	ldd	r19, Z+1	; 0x01
    1024:	28 0f       	add	r18, r24
    1026:	39 1f       	adc	r19, r25
    1028:	80 91 7d 01 	lds	r24, 0x017D
    102c:	90 91 7e 01 	lds	r25, 0x017E
    1030:	82 17       	cp	r24, r18
    1032:	93 07       	cpc	r25, r19
    1034:	79 f5       	brne	.+94     	; 0x1094 <free+0x92>
    1036:	f0 93 7e 01 	sts	0x017E, r31
    103a:	e0 93 7d 01 	sts	0x017D, r30
    103e:	6d c0       	rjmp	.+218    	; 0x111a <free+0x118>
    1040:	de 01       	movw	r26, r28
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	ae 17       	cp	r26, r30
    1048:	bf 07       	cpc	r27, r31
    104a:	50 f4       	brcc	.+20     	; 0x1060 <free+0x5e>
    104c:	12 96       	adiw	r26, 0x02	; 2
    104e:	4d 91       	ld	r20, X+
    1050:	5c 91       	ld	r21, X
    1052:	13 97       	sbiw	r26, 0x03	; 3
    1054:	9d 01       	movw	r18, r26
    1056:	41 15       	cp	r20, r1
    1058:	51 05       	cpc	r21, r1
    105a:	09 f1       	breq	.+66     	; 0x109e <free+0x9c>
    105c:	da 01       	movw	r26, r20
    105e:	f3 cf       	rjmp	.-26     	; 0x1046 <free+0x44>
    1060:	b3 83       	std	Z+3, r27	; 0x03
    1062:	a2 83       	std	Z+2, r26	; 0x02
    1064:	40 81       	ld	r20, Z
    1066:	51 81       	ldd	r21, Z+1	; 0x01
    1068:	84 0f       	add	r24, r20
    106a:	95 1f       	adc	r25, r21
    106c:	8a 17       	cp	r24, r26
    106e:	9b 07       	cpc	r25, r27
    1070:	71 f4       	brne	.+28     	; 0x108e <free+0x8c>
    1072:	8d 91       	ld	r24, X+
    1074:	9c 91       	ld	r25, X
    1076:	11 97       	sbiw	r26, 0x01	; 1
    1078:	84 0f       	add	r24, r20
    107a:	95 1f       	adc	r25, r21
    107c:	02 96       	adiw	r24, 0x02	; 2
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    1082:	12 96       	adiw	r26, 0x02	; 2
    1084:	8d 91       	ld	r24, X+
    1086:	9c 91       	ld	r25, X
    1088:	13 97       	sbiw	r26, 0x03	; 3
    108a:	93 83       	std	Z+3, r25	; 0x03
    108c:	82 83       	std	Z+2, r24	; 0x02
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	29 f4       	brne	.+10     	; 0x109e <free+0x9c>
    1094:	f0 93 80 01 	sts	0x0180, r31
    1098:	e0 93 7f 01 	sts	0x017F, r30
    109c:	3e c0       	rjmp	.+124    	; 0x111a <free+0x118>
    109e:	d9 01       	movw	r26, r18
    10a0:	13 96       	adiw	r26, 0x03	; 3
    10a2:	fc 93       	st	X, r31
    10a4:	ee 93       	st	-X, r30
    10a6:	12 97       	sbiw	r26, 0x02	; 2
    10a8:	4d 91       	ld	r20, X+
    10aa:	5d 91       	ld	r21, X+
    10ac:	a4 0f       	add	r26, r20
    10ae:	b5 1f       	adc	r27, r21
    10b0:	ea 17       	cp	r30, r26
    10b2:	fb 07       	cpc	r31, r27
    10b4:	79 f4       	brne	.+30     	; 0x10d4 <free+0xd2>
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	84 0f       	add	r24, r20
    10bc:	95 1f       	adc	r25, r21
    10be:	02 96       	adiw	r24, 0x02	; 2
    10c0:	d9 01       	movw	r26, r18
    10c2:	11 96       	adiw	r26, 0x01	; 1
    10c4:	9c 93       	st	X, r25
    10c6:	8e 93       	st	-X, r24
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	93 81       	ldd	r25, Z+3	; 0x03
    10cc:	13 96       	adiw	r26, 0x03	; 3
    10ce:	9c 93       	st	X, r25
    10d0:	8e 93       	st	-X, r24
    10d2:	12 97       	sbiw	r26, 0x02	; 2
    10d4:	e0 e0       	ldi	r30, 0x00	; 0
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	9b 81       	ldd	r25, Y+3	; 0x03
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	19 f0       	breq	.+6      	; 0x10e6 <free+0xe4>
    10e0:	fe 01       	movw	r30, r28
    10e2:	ec 01       	movw	r28, r24
    10e4:	f9 cf       	rjmp	.-14     	; 0x10d8 <free+0xd6>
    10e6:	ce 01       	movw	r24, r28
    10e8:	02 96       	adiw	r24, 0x02	; 2
    10ea:	28 81       	ld	r18, Y
    10ec:	39 81       	ldd	r19, Y+1	; 0x01
    10ee:	82 0f       	add	r24, r18
    10f0:	93 1f       	adc	r25, r19
    10f2:	20 91 7d 01 	lds	r18, 0x017D
    10f6:	30 91 7e 01 	lds	r19, 0x017E
    10fa:	28 17       	cp	r18, r24
    10fc:	39 07       	cpc	r19, r25
    10fe:	69 f4       	brne	.+26     	; 0x111a <free+0x118>
    1100:	30 97       	sbiw	r30, 0x00	; 0
    1102:	29 f4       	brne	.+10     	; 0x110e <free+0x10c>
    1104:	10 92 80 01 	sts	0x0180, r1
    1108:	10 92 7f 01 	sts	0x017F, r1
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <free+0x110>
    110e:	13 82       	std	Z+3, r1	; 0x03
    1110:	12 82       	std	Z+2, r1	; 0x02
    1112:	d0 93 7e 01 	sts	0x017E, r29
    1116:	c0 93 7d 01 	sts	0x017D, r28
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <strnlen_P>:
    1120:	fc 01       	movw	r30, r24
    1122:	05 90       	lpm	r0, Z+
    1124:	61 50       	subi	r22, 0x01	; 1
    1126:	70 40       	sbci	r23, 0x00	; 0
    1128:	01 10       	cpse	r0, r1
    112a:	d8 f7       	brcc	.-10     	; 0x1122 <strnlen_P+0x2>
    112c:	80 95       	com	r24
    112e:	90 95       	com	r25
    1130:	8e 0f       	add	r24, r30
    1132:	9f 1f       	adc	r25, r31
    1134:	08 95       	ret

00001136 <memset>:
    1136:	dc 01       	movw	r26, r24
    1138:	01 c0       	rjmp	.+2      	; 0x113c <memset+0x6>
    113a:	6d 93       	st	X+, r22
    113c:	41 50       	subi	r20, 0x01	; 1
    113e:	50 40       	sbci	r21, 0x00	; 0
    1140:	e0 f7       	brcc	.-8      	; 0x113a <memset+0x4>
    1142:	08 95       	ret

00001144 <strnlen>:
    1144:	fc 01       	movw	r30, r24
    1146:	61 50       	subi	r22, 0x01	; 1
    1148:	70 40       	sbci	r23, 0x00	; 0
    114a:	01 90       	ld	r0, Z+
    114c:	01 10       	cpse	r0, r1
    114e:	d8 f7       	brcc	.-10     	; 0x1146 <strnlen+0x2>
    1150:	80 95       	com	r24
    1152:	90 95       	com	r25
    1154:	8e 0f       	add	r24, r30
    1156:	9f 1f       	adc	r25, r31
    1158:	08 95       	ret

0000115a <fputc>:
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	18 2f       	mov	r17, r24
    1164:	09 2f       	mov	r16, r25
    1166:	eb 01       	movw	r28, r22
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	81 fd       	sbrc	r24, 1
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <fputc+0x1a>
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	9f ef       	ldi	r25, 0xFF	; 255
    1172:	20 c0       	rjmp	.+64     	; 0x11b4 <fputc+0x5a>
    1174:	82 ff       	sbrs	r24, 2
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <fputc+0x3e>
    1178:	4e 81       	ldd	r20, Y+6	; 0x06
    117a:	5f 81       	ldd	r21, Y+7	; 0x07
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	42 17       	cp	r20, r18
    1182:	53 07       	cpc	r21, r19
    1184:	7c f4       	brge	.+30     	; 0x11a4 <fputc+0x4a>
    1186:	e8 81       	ld	r30, Y
    1188:	f9 81       	ldd	r31, Y+1	; 0x01
    118a:	9f 01       	movw	r18, r30
    118c:	2f 5f       	subi	r18, 0xFF	; 255
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	39 83       	std	Y+1, r19	; 0x01
    1192:	28 83       	st	Y, r18
    1194:	10 83       	st	Z, r17
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <fputc+0x4a>
    1198:	e8 85       	ldd	r30, Y+8	; 0x08
    119a:	f9 85       	ldd	r31, Y+9	; 0x09
    119c:	81 2f       	mov	r24, r17
    119e:	09 95       	icall
    11a0:	89 2b       	or	r24, r25
    11a2:	29 f7       	brne	.-54     	; 0x116e <fputc+0x14>
    11a4:	2e 81       	ldd	r18, Y+6	; 0x06
    11a6:	3f 81       	ldd	r19, Y+7	; 0x07
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	3f 83       	std	Y+7, r19	; 0x07
    11ae:	2e 83       	std	Y+6, r18	; 0x06
    11b0:	81 2f       	mov	r24, r17
    11b2:	90 2f       	mov	r25, r16
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <__ultoa_invert>:
    11be:	fa 01       	movw	r30, r20
    11c0:	aa 27       	eor	r26, r26
    11c2:	28 30       	cpi	r18, 0x08	; 8
    11c4:	51 f1       	breq	.+84     	; 0x121a <__ultoa_invert+0x5c>
    11c6:	20 31       	cpi	r18, 0x10	; 16
    11c8:	81 f1       	breq	.+96     	; 0x122a <__ultoa_invert+0x6c>
    11ca:	e8 94       	clt
    11cc:	6f 93       	push	r22
    11ce:	6e 7f       	andi	r22, 0xFE	; 254
    11d0:	6e 5f       	subi	r22, 0xFE	; 254
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	8f 4f       	sbci	r24, 0xFF	; 255
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	af 4f       	sbci	r26, 0xFF	; 255
    11da:	b1 e0       	ldi	r27, 0x01	; 1
    11dc:	3e d0       	rcall	.+124    	; 0x125a <__ultoa_invert+0x9c>
    11de:	b4 e0       	ldi	r27, 0x04	; 4
    11e0:	3c d0       	rcall	.+120    	; 0x125a <__ultoa_invert+0x9c>
    11e2:	67 0f       	add	r22, r23
    11e4:	78 1f       	adc	r23, r24
    11e6:	89 1f       	adc	r24, r25
    11e8:	9a 1f       	adc	r25, r26
    11ea:	a1 1d       	adc	r26, r1
    11ec:	68 0f       	add	r22, r24
    11ee:	79 1f       	adc	r23, r25
    11f0:	8a 1f       	adc	r24, r26
    11f2:	91 1d       	adc	r25, r1
    11f4:	a1 1d       	adc	r26, r1
    11f6:	6a 0f       	add	r22, r26
    11f8:	71 1d       	adc	r23, r1
    11fa:	81 1d       	adc	r24, r1
    11fc:	91 1d       	adc	r25, r1
    11fe:	a1 1d       	adc	r26, r1
    1200:	20 d0       	rcall	.+64     	; 0x1242 <__ultoa_invert+0x84>
    1202:	09 f4       	brne	.+2      	; 0x1206 <__ultoa_invert+0x48>
    1204:	68 94       	set
    1206:	3f 91       	pop	r19
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	26 9f       	mul	r18, r22
    120c:	11 24       	eor	r1, r1
    120e:	30 19       	sub	r19, r0
    1210:	30 5d       	subi	r19, 0xD0	; 208
    1212:	31 93       	st	Z+, r19
    1214:	de f6       	brtc	.-74     	; 0x11cc <__ultoa_invert+0xe>
    1216:	cf 01       	movw	r24, r30
    1218:	08 95       	ret
    121a:	46 2f       	mov	r20, r22
    121c:	47 70       	andi	r20, 0x07	; 7
    121e:	40 5d       	subi	r20, 0xD0	; 208
    1220:	41 93       	st	Z+, r20
    1222:	b3 e0       	ldi	r27, 0x03	; 3
    1224:	0f d0       	rcall	.+30     	; 0x1244 <__ultoa_invert+0x86>
    1226:	c9 f7       	brne	.-14     	; 0x121a <__ultoa_invert+0x5c>
    1228:	f6 cf       	rjmp	.-20     	; 0x1216 <__ultoa_invert+0x58>
    122a:	46 2f       	mov	r20, r22
    122c:	4f 70       	andi	r20, 0x0F	; 15
    122e:	40 5d       	subi	r20, 0xD0	; 208
    1230:	4a 33       	cpi	r20, 0x3A	; 58
    1232:	18 f0       	brcs	.+6      	; 0x123a <__ultoa_invert+0x7c>
    1234:	49 5d       	subi	r20, 0xD9	; 217
    1236:	31 fd       	sbrc	r19, 1
    1238:	40 52       	subi	r20, 0x20	; 32
    123a:	41 93       	st	Z+, r20
    123c:	02 d0       	rcall	.+4      	; 0x1242 <__ultoa_invert+0x84>
    123e:	a9 f7       	brne	.-22     	; 0x122a <__ultoa_invert+0x6c>
    1240:	ea cf       	rjmp	.-44     	; 0x1216 <__ultoa_invert+0x58>
    1242:	b4 e0       	ldi	r27, 0x04	; 4
    1244:	a6 95       	lsr	r26
    1246:	97 95       	ror	r25
    1248:	87 95       	ror	r24
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	ba 95       	dec	r27
    1250:	c9 f7       	brne	.-14     	; 0x1244 <__ultoa_invert+0x86>
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	61 05       	cpc	r22, r1
    1256:	71 05       	cpc	r23, r1
    1258:	08 95       	ret
    125a:	9b 01       	movw	r18, r22
    125c:	ac 01       	movw	r20, r24
    125e:	0a 2e       	mov	r0, r26
    1260:	06 94       	lsr	r0
    1262:	57 95       	ror	r21
    1264:	47 95       	ror	r20
    1266:	37 95       	ror	r19
    1268:	27 95       	ror	r18
    126a:	ba 95       	dec	r27
    126c:	c9 f7       	brne	.-14     	; 0x1260 <__ultoa_invert+0xa2>
    126e:	62 0f       	add	r22, r18
    1270:	73 1f       	adc	r23, r19
    1272:	84 1f       	adc	r24, r20
    1274:	95 1f       	adc	r25, r21
    1276:	a0 1d       	adc	r26, r0
    1278:	08 95       	ret

0000127a <__prologue_saves__>:
    127a:	2f 92       	push	r2
    127c:	3f 92       	push	r3
    127e:	4f 92       	push	r4
    1280:	5f 92       	push	r5
    1282:	6f 92       	push	r6
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	ca 1b       	sub	r28, r26
    12a4:	db 0b       	sbc	r29, r27
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	09 94       	ijmp

000012b2 <__epilogue_restores__>:
    12b2:	2a 88       	ldd	r2, Y+18	; 0x12
    12b4:	39 88       	ldd	r3, Y+17	; 0x11
    12b6:	48 88       	ldd	r4, Y+16	; 0x10
    12b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    12ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    12bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    12be:	8c 84       	ldd	r8, Y+12	; 0x0c
    12c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    12c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    12c4:	b9 84       	ldd	r11, Y+9	; 0x09
    12c6:	c8 84       	ldd	r12, Y+8	; 0x08
    12c8:	df 80       	ldd	r13, Y+7	; 0x07
    12ca:	ee 80       	ldd	r14, Y+6	; 0x06
    12cc:	fd 80       	ldd	r15, Y+5	; 0x05
    12ce:	0c 81       	ldd	r16, Y+4	; 0x04
    12d0:	1b 81       	ldd	r17, Y+3	; 0x03
    12d2:	aa 81       	ldd	r26, Y+2	; 0x02
    12d4:	b9 81       	ldd	r27, Y+1	; 0x01
    12d6:	ce 0f       	add	r28, r30
    12d8:	d1 1d       	adc	r29, r1
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	ed 01       	movw	r28, r26
    12e6:	08 95       	ret

000012e8 <_exit>:
    12e8:	f8 94       	cli

000012ea <__stop_program>:
    12ea:	ff cf       	rjmp	.-2      	; 0x12ea <__stop_program>
