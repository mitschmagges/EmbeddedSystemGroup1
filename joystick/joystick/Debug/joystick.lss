
joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000666  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002a8  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d8  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000257  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000291  00000000  00000000  000012e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e5       	ldi	r30, 0x54	; 84
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 32       	cpi	r26, 0x28	; 40
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e2       	ldi	r26, 0x28	; 40
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 32       	cpi	r26, 0x28	; 40
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  a6:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Init>:
	int posY;
} pos;

void USART_Init( unsigned int ubrr ) {
	// set the baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  ae:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
  b0:	89 b9       	out	0x09, r24	; 9
	// enable reciever and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	08 95       	ret

000000b8 <XMEM_Init>:
}

void XMEM_Init() {
	MCUCR |= (1<<SRE);
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  be:	80 b7       	in	r24, 0x30	; 48
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 bf       	out	0x30, r24	; 48
  c4:	08 95       	ret

000000c6 <init>:
}

void init() {
	USART_Init( MYUBRR );
  c6:	8f e1       	ldi	r24, 0x1F	; 31
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 57 00 	call	0xae	; 0xae <USART_Init>
	XMEM_Init();
  ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <XMEM_Init>
	DDRB &= 0; 
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	17 ba       	out	0x17, r1	; 23
  d6:	08 95       	ret

000000d8 <USART_putchar>:
	return UDR0;
}

void USART_putchar(unsigned char data) {
	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
  d8:	5d 9b       	sbis	0x0b, 5	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <USART_putchar>
	// put data into buffer, sends the data
	UDR0 = data;
  dc:	8c b9       	out	0x0c, r24	; 12
  de:	08 95       	ret

000000e0 <printf_char>:
}


void printf_char(char* string) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
	for (int i = 0; string[i] != '\0'; ++i) {
  e6:	88 81       	ld	r24, Y
  e8:	88 23       	and	r24, r24
  ea:	31 f0       	breq	.+12     	; 0xf8 <printf_char+0x18>
  ec:	21 96       	adiw	r28, 0x01	; 1
		USART_putchar(string[i]);
  ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_putchar>
	UDR0 = data;
}


void printf_char(char* string) {
	for (int i = 0; string[i] != '\0'; ++i) {
  f2:	89 91       	ld	r24, Y+
  f4:	81 11       	cpse	r24, r1
  f6:	fb cf       	rjmp	.-10     	; 0xee <printf_char+0xe>
		USART_putchar(string[i]);
	}
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <printf_int>:

void printf_int(unsigned int input) {
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
	if(input/10 > 0)
 104:	8a 30       	cpi	r24, 0x0A	; 10
 106:	91 05       	cpc	r25, r1
 108:	68 f0       	brcs	.+26     	; 0x124 <printf_int+0x26>
		printf_int(input/10);
 10a:	9c 01       	movw	r18, r24
 10c:	ad ec       	ldi	r26, 0xCD	; 205
 10e:	bc ec       	ldi	r27, 0xCC	; 204
 110:	0e 94 19 01 	call	0x232	; 0x232 <__umulhisi3>
 114:	96 95       	lsr	r25
 116:	87 95       	ror	r24
 118:	96 95       	lsr	r25
 11a:	87 95       	ror	r24
 11c:	96 95       	lsr	r25
 11e:	87 95       	ror	r24
 120:	0e 94 7f 00 	call	0xfe	; 0xfe <printf_int>
	USART_putchar((unsigned char) (input%10) + '0');
 124:	9e 01       	movw	r18, r28
 126:	ad ec       	ldi	r26, 0xCD	; 205
 128:	bc ec       	ldi	r27, 0xCC	; 204
 12a:	0e 94 19 01 	call	0x232	; 0x232 <__umulhisi3>
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	9c 01       	movw	r18, r24
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	82 0f       	add	r24, r18
 14e:	93 1f       	adc	r25, r19
 150:	9e 01       	movw	r18, r28
 152:	28 1b       	sub	r18, r24
 154:	39 0b       	sbc	r19, r25
 156:	c9 01       	movw	r24, r18
 158:	80 5d       	subi	r24, 0xD0	; 208
 15a:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_putchar>
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <main>:
		return LEFT;
	} //...
	return NEUTRAL;
}

int main(void) {
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0x6>
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0x8>
 16c:	1f 92       	push	r1
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	init();
 172:	0e 94 63 00 	call	0xc6	; 0xc6 <init>
	}
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
 176:	00 e0       	ldi	r16, 0x00	; 0
 178:	14 e1       	ldi	r17, 0x14	; 20
 17a:	68 94       	set
 17c:	cc 24       	eor	r12, r12
 17e:	c2 f8       	bld	r12, 2
 180:	0f 2e       	mov	r0, r31
 182:	f5 e0       	ldi	r31, 0x05	; 5
 184:	df 2e       	mov	r13, r31
 186:	f0 2d       	mov	r31, r0
 188:	0f 2e       	mov	r0, r31
 18a:	f6 e0       	ldi	r31, 0x06	; 6
 18c:	ef 2e       	mov	r14, r31
 18e:	f0 2d       	mov	r31, r0
 190:	0f 2e       	mov	r0, r31
 192:	f7 e0       	ldi	r31, 0x07	; 7
 194:	ff 2e       	mov	r15, r31
 196:	f0 2d       	mov	r31, r0
 198:	f8 01       	movw	r30, r16
 19a:	c0 82       	st	Z, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	f2 e5       	ldi	r31, 0x52	; 82
 19e:	fa 95       	dec	r31
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0x3a>
	_delay_us(50);
	return *ptr;
 1a2:	f8 01       	movw	r30, r16
 1a4:	80 81       	ld	r24, Z
	volatile uint8_t l,r;
	volatile uint8_t buttons;
	
	while(1) {
		
		y = ADC_read(ADC_Y_AXIS);
 1a6:	8a 83       	std	Y+2, r24	; 0x02
	}
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
 1a8:	d0 82       	st	Z, r13
 1aa:	f2 e5       	ldi	r31, 0x52	; 82
 1ac:	fa 95       	dec	r31
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x48>
	_delay_us(50);
	return *ptr;
 1b0:	f8 01       	movw	r30, r16
 1b2:	80 81       	ld	r24, Z
	volatile uint8_t buttons;
	
	while(1) {
		
		y = ADC_read(ADC_Y_AXIS);
		x = ADC_read(ADC_X_AXIS);
 1b4:	89 83       	std	Y+1, r24	; 0x01
		printf_char("x: ");
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 70 00 	call	0xe0	; 0xe0 <printf_char>
		printf_int(x);
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 7f 00 	call	0xfe	; 0xfe <printf_int>
		printf_char("\t y: ");
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 70 00 	call	0xe0	; 0xe0 <printf_char>
		printf_int(y);
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 7f 00 	call	0xfe	; 0xfe <printf_int>
	}
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
 1d6:	f8 01       	movw	r30, r16
 1d8:	e0 82       	st	Z, r14
 1da:	f2 e5       	ldi	r31, 0x52	; 82
 1dc:	fa 95       	dec	r31
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x78>
	_delay_us(50);
	return *ptr;
 1e0:	f8 01       	movw	r30, r16
 1e2:	80 81       	ld	r24, Z
		printf_char("x: ");
		printf_int(x);
		printf_char("\t y: ");
		printf_int(y);
		
		l = ADC_read(ADC_L_SLIDER);
 1e4:	8b 83       	std	Y+3, r24	; 0x03
	}
}

uint8_t ADC_read( int channelNumber) {
	volatile uint8_t* ptr = (uint8_t*) 0x1400;
	*ptr = channelNumber;
 1e6:	f0 82       	st	Z, r15
 1e8:	f2 e5       	ldi	r31, 0x52	; 82
 1ea:	fa 95       	dec	r31
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x86>
	_delay_us(50);
	return *ptr;
 1ee:	f8 01       	movw	r30, r16
 1f0:	80 81       	ld	r24, Z
		printf_int(x);
		printf_char("\t y: ");
		printf_int(y);
		
		l = ADC_read(ADC_L_SLIDER);
		r = ADC_read(ADC_R_SLIDER);
 1f2:	8c 83       	std	Y+4, r24	; 0x04
		printf_char("\t\t ls: ");
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 70 00 	call	0xe0	; 0xe0 <printf_char>
		printf_int(l);
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 7f 00 	call	0xfe	; 0xfe <printf_int>
		printf_char("\t rs: ");
 204:	82 e1       	ldi	r24, 0x12	; 18
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 70 00 	call	0xe0	; 0xe0 <printf_char>
		printf_int(r);
 20c:	8c 81       	ldd	r24, Y+4	; 0x04
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <printf_int>
		
		buttons = PORTB;
 214:	88 b3       	in	r24, 0x18	; 24
 216:	8d 83       	std	Y+5, r24	; 0x05
		printf_char("\t\t buttons: ");
 218:	89 e1       	ldi	r24, 0x19	; 25
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 70 00 	call	0xe0	; 0xe0 <printf_char>
		printf_int(buttons);
 220:	8d 81       	ldd	r24, Y+5	; 0x05
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 7f 00 	call	0xfe	; 0xfe <printf_int>
		printf_char("\n");
 228:	86 e2       	ldi	r24, 0x26	; 38
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 70 00 	call	0xe0	; 0xe0 <printf_char>
 230:	b3 cf       	rjmp	.-154    	; 0x198 <main+0x34>

00000232 <__umulhisi3>:
 232:	a2 9f       	mul	r26, r18
 234:	b0 01       	movw	r22, r0
 236:	b3 9f       	mul	r27, r19
 238:	c0 01       	movw	r24, r0
 23a:	a3 9f       	mul	r26, r19
 23c:	70 0d       	add	r23, r0
 23e:	81 1d       	adc	r24, r1
 240:	11 24       	eor	r1, r1
 242:	91 1d       	adc	r25, r1
 244:	b2 9f       	mul	r27, r18
 246:	70 0d       	add	r23, r0
 248:	81 1d       	adc	r24, r1
 24a:	11 24       	eor	r1, r1
 24c:	91 1d       	adc	r25, r1
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
