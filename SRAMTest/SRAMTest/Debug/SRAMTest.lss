
SRAMTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000411  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000198  00000000  00000000  000005cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000184  00000000  00000000  00000767  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000dc  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001f0  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002dc  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  6c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea ed       	ldi	r30, 0xDA	; 218
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>
  92:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  96:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <USART_Init>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

void USART_Init( unsigned int ubrr ) {	
	// set the baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  9e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
  a0:	89 b9       	out	0x09, r24	; 9
	// enable reciever and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	08 95       	ret

000000a8 <XMEM_Init>:
		printf_int(input/10);
	putchar((unsigned char) (input%10) + '0');
}

void XMEM_Init(){
	MCUCR |= (1<<SRE);
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  ae:	80 b7       	in	r24, 0x30	; 48
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 bf       	out	0x30, r24	; 48
  b4:	08 95       	ret

000000b6 <init>:
	
}

void init(){
	USART_Init ( MYUBRR );
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_Init>
	XMEM_Init();
  be:	0e 94 54 00 	call	0xa8	; 0xa8 <XMEM_Init>
  c2:	08 95       	ret

000000c4 <main>:
	printf_int(retrieval_errors);
	printf(" errors in retrieval phase\n\n");
}

int main(void) {
	init();
  c4:	0e 94 5b 00 	call	0xb6	; 0xb6 <init>
	//SRAM_test();
	//printf("Hello world");
	int* ptr_oled_cs = (int*) 0x17FF;
	ptr_oled_cs[1] = 10;
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 02 18 	sts	0x1802, r25
  d0:	80 93 01 18 	sts	0x1801, r24
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x10>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
