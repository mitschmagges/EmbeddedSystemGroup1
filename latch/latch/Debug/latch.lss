
latch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000020c  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000148  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000140  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000ac  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000184  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000139  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000099d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  80:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <USART_Init>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

void USART_Init( unsigned int ubrr ) {	
	// set the baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  88:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
  8a:	89 b9       	out	0x09, r24	; 9
	// enable reciever and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <XMEM_Init>:
		printf_int(input/10);
	USART_transmitData((unsigned char) (input%10) + '0');
}

void XMEM_Init(){
	MCUCR |= 0x80; //Setting the SRE-Bit!? 
  92:	85 b7       	in	r24, 0x35	; 53
  94:	80 68       	ori	r24, 0x80	; 128
  96:	85 bf       	out	0x35, r24	; 53
  98:	08 95       	ret

0000009a <init>:
}
void init(){
		USART_Init ( MYUBRR );
  9a:	8f e1       	ldi	r24, 0x1F	; 31
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 44 00 	call	0x88	; 0x88 <USART_Init>
		XMEM_Init();
  a2:	0e 94 49 00 	call	0x92	; 0x92 <XMEM_Init>
  a6:	08 95       	ret

000000a8 <main>:
}
int main(void) {
	init();
  a8:	0e 94 4d 00 	call	0x9a	; 0x9a <init>
	volatile int* ptr= (int*) 0xFF;
	DDRE = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	86 b9       	out	0x06, r24	; 6
	PORTE = 2;
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	87 b9       	out	0x07, r24	; 7
    while(1) {
		*ptr = 0xFF;
  b4:	ef ef       	ldi	r30, 0xFF	; 255
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	f1 83       	std	Z+1, r31	; 0x01
  ba:	e0 83       	st	Z, r30
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <main+0x10>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
